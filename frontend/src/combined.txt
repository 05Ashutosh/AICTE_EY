========================================
File: App.css
========================================



========================================
File: App.jsx
========================================

import React, { useEffect, useState } from "react";
import { useDispatch, useSelector } from "react-redux";
import { Routes, Route, Outlet, Navigate } from "react-router-dom";
import { ToastContainer } from "react-toastify";
import "react-toastify/dist/ReactToastify.css";

import Login from "./pages/Login";
import Signup from "./pages/Signup";
import Home from "./pages/Home";
import RecipeDetails from "./pages/RecipeDetails";
import UserProfile from "./pages/UserProfile";
import RecipeForm from "./pages/RecipeForm";
import FavoritesPage from "./pages/FavoritesPage";
import VideoPage from "./pages/VideoPage";
import VideoPlayerPage from "./pages/VideoPlayerPage";

import Navbar from "./components/Navbar";
import Sidebar from "./components/Sidebar";

import {
  setAuthenticated,
  setUser,
  logoutUser,
} from "./features/auth/authSlice";
import { apiRequest } from "./utils/api";

const ProtectedRoute = ({ children }) => {
  const isAuthenticated = useSelector((state) => state.auth.isAuthenticated);
  return isAuthenticated ? children : <Navigate to="/login" />;
};

const ProtectedLayout = () => {
  const [isSidebarCollapsed, setIsSidebarCollapsed] = useState(false);

  const toggleSidebar = () => {
    setIsSidebarCollapsed(!isSidebarCollapsed);
  };

  return (
    <>
      <Navbar />
      <Sidebar isCollapsed={isSidebarCollapsed} toggleSidebar={toggleSidebar} />
      <Outlet />
    </>
  );
};

const App = () => {
  const dispatch = useDispatch();

  useEffect(() => {
    const checkAuth = async () => {
      const token = localStorage.getItem("accessToken");
      if (!token) {
        dispatch(setAuthenticated(false));
        return;
      }

      try {
        const response = await apiRequest(
          "/users/current-user",
          "GET",
          null,
          dispatch
        );
        dispatch(setUser({ user: response.data.data.user, token }));
      } catch (error) {
        if (error.message.includes("Unauthorized")) {
          try {
            const refreshResponse = await apiRequest(
              "/users/refresh-token",
              "POST",
              null,
              dispatch
            );
            const newToken = refreshResponse.data.data.accessToken;
            localStorage.setItem("accessToken", newToken);
            const currentUserResponse = await apiRequest(
              "/users/current-user",
              "GET",
              null,
              dispatch
            );
            dispatch(
              setUser({
                user: currentUserResponse.data.data.user,
                token: newToken,
              })
            );
          } catch (refreshError) {
            dispatch(logoutUser());
          }
        } else {
          dispatch(logoutUser());
        }
      }
    };

    checkAuth();
  }, [dispatch]);

  return (
    <>
      <ToastContainer position="top-right" autoClose={3000} />
      <Routes>
        <Route path="/login" element={<Login />} />
        <Route path="/signup" element={<Signup />} />
        <Route
          path="/"
          element={
            <ProtectedRoute>
              <ProtectedLayout />
            </ProtectedRoute>
          }
        >
          <Route index element={<Home />} />
          <Route path="recipes/:id" element={<RecipeDetails />} />
          <Route path="profile" element={<UserProfile />} />
          <Route path="create-recipe" element={<RecipeForm />} />
          <Route path="favorites" element={<FavoritesPage />} />
          <Route path="video" element={<VideoPage />} />
          <Route path="video/:id" element={<VideoPlayerPage />} />
        </Route>
      </Routes>
    </>
  );
};

export default App;


========================================
File: index.css
========================================

@import "tailwindcss";

@layer utilities {
    /* Hide scrollbar for Chrome, Safari and Opera */
    .no-scrollbar::-webkit-scrollbar {
        display: none;
    }

    /* Hide scrollbar for IE, Edge and Firefox */
    .no-scrollbar {
        -ms-overflow-style: none;  /* IE and Edge */
        scrollbar-width: none;  /* Firefox */
    }
}

========================================
File: main.jsx
========================================

// import { StrictMode } from "react";
// import { createRoot } from "react-dom/client";
// import "./index.css";
import App from "./App.jsx";
// import { Provider } from "react-redux";
import { store } from "./app/store.js";
// import { ToastContainer } from "react-toastify";
import "react-toastify/dist/ReactToastify.css";

// createRoot(document.getElementById("root")).render(
//   // <StrictMode>
//   <Provider store={store}>
//     <App />
//   </Provider>
//   // </StrictMode>,
// );

import React from "react";
import { createRoot } from "react-dom/client";
import { Provider } from "react-redux";
import { BrowserRouter } from "react-router-dom";
// import store from './store';
// import App from './App';
import "./index.css";

const root = createRoot(document.getElementById("root"));
root.render(
  <Provider store={store}>
    <BrowserRouter>
      <App />
    </BrowserRouter>
  </Provider>
);


========================================
File: ProtectedRoutes.jsx
========================================

import {useNavigate} from "react-router-dom";
import {useEffect} from "react";
import {useSelector} from "react-redux";

export const ProtectedRoutes = ({children}) => {
    const isAuthenticated= useSelector(state =>state.auth?.isAuthenticated);
    const navigate = useNavigate();
    useEffect(() => {
        if (!isAuthenticated) {
            navigate("/login");
        }
    },[isAuthenticated, navigate])
    return (
        children
    )
}


========================================
File: app\store.js
========================================

import { configureStore } from "@reduxjs/toolkit";
import authReducer from "../features/auth/authSlice"; 
import recipeReducer from "../features/recipes/recipeSlice"; 

export const store = configureStore({
  reducer: {
    auth: authReducer,
    recipes: recipeReducer,
  },
});


========================================
File: assets\react.svg
========================================

<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="35.93" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 228"><path fill="#00D8FF" d="M210.483 73.824a171.49 171.49 0 0 0-8.24-2.597c.465-1.9.893-3.777 1.273-5.621c6.238-30.281 2.16-54.676-11.769-62.708c-13.355-7.7-35.196.329-57.254 19.526a171.23 171.23 0 0 0-6.375 5.848a155.866 155.866 0 0 0-4.241-3.917C100.759 3.829 77.587-4.822 63.673 3.233C50.33 10.957 46.379 33.89 51.995 62.588a170.974 170.974 0 0 0 1.892 8.48c-3.28.932-6.445 1.924-9.474 2.98C17.309 83.498 0 98.307 0 113.668c0 15.865 18.582 31.778 46.812 41.427a145.52 145.52 0 0 0 6.921 2.165a167.467 167.467 0 0 0-2.01 9.138c-5.354 28.2-1.173 50.591 12.134 58.266c13.744 7.926 36.812-.22 59.273-19.855a145.567 145.567 0 0 0 5.342-4.923a168.064 168.064 0 0 0 6.92 6.314c21.758 18.722 43.246 26.282 56.54 18.586c13.731-7.949 18.194-32.003 12.4-61.268a145.016 145.016 0 0 0-1.535-6.842c1.62-.48 3.21-.974 4.76-1.488c29.348-9.723 48.443-25.443 48.443-41.52c0-15.417-17.868-30.326-45.517-39.844Zm-6.365 70.984c-1.4.463-2.836.91-4.3 1.345c-3.24-10.257-7.612-21.163-12.963-32.432c5.106-11 9.31-21.767 12.459-31.957c2.619.758 5.16 1.557 7.61 2.4c23.69 8.156 38.14 20.213 38.14 29.504c0 9.896-15.606 22.743-40.946 31.14Zm-10.514 20.834c2.562 12.94 2.927 24.64 1.23 33.787c-1.524 8.219-4.59 13.698-8.382 15.893c-8.067 4.67-25.32-1.4-43.927-17.412a156.726 156.726 0 0 1-6.437-5.87c7.214-7.889 14.423-17.06 21.459-27.246c12.376-1.098 24.068-2.894 34.671-5.345a134.17 134.17 0 0 1 1.386 6.193ZM87.276 214.515c-7.882 2.783-14.16 2.863-17.955.675c-8.075-4.657-11.432-22.636-6.853-46.752a156.923 156.923 0 0 1 1.869-8.499c10.486 2.32 22.093 3.988 34.498 4.994c7.084 9.967 14.501 19.128 21.976 27.15a134.668 134.668 0 0 1-4.877 4.492c-9.933 8.682-19.886 14.842-28.658 17.94ZM50.35 144.747c-12.483-4.267-22.792-9.812-29.858-15.863c-6.35-5.437-9.555-10.836-9.555-15.216c0-9.322 13.897-21.212 37.076-29.293c2.813-.98 5.757-1.905 8.812-2.773c3.204 10.42 7.406 21.315 12.477 32.332c-5.137 11.18-9.399 22.249-12.634 32.792a134.718 134.718 0 0 1-6.318-1.979Zm12.378-84.26c-4.811-24.587-1.616-43.134 6.425-47.789c8.564-4.958 27.502 2.111 47.463 19.835a144.318 144.318 0 0 1 3.841 3.545c-7.438 7.987-14.787 17.08-21.808 26.988c-12.04 1.116-23.565 2.908-34.161 5.309a160.342 160.342 0 0 1-1.76-7.887Zm110.427 27.268a347.8 347.8 0 0 0-7.785-12.803c8.168 1.033 15.994 2.404 23.343 4.08c-2.206 7.072-4.956 14.465-8.193 22.045a381.151 381.151 0 0 0-7.365-13.322Zm-45.032-43.861c5.044 5.465 10.096 11.566 15.065 18.186a322.04 322.04 0 0 0-30.257-.006c4.974-6.559 10.069-12.652 15.192-18.18ZM82.802 87.83a323.167 323.167 0 0 0-7.227 13.238c-3.184-7.553-5.909-14.98-8.134-22.152c7.304-1.634 15.093-2.97 23.209-3.984a321.524 321.524 0 0 0-7.848 12.897Zm8.081 65.352c-8.385-.936-16.291-2.203-23.593-3.793c2.26-7.3 5.045-14.885 8.298-22.6a321.187 321.187 0 0 0 7.257 13.246c2.594 4.48 5.28 8.868 8.038 13.147Zm37.542 31.03c-5.184-5.592-10.354-11.779-15.403-18.433c4.902.192 9.899.29 14.978.29c5.218 0 10.376-.117 15.453-.343c-4.985 6.774-10.018 12.97-15.028 18.486Zm52.198-57.817c3.422 7.8 6.306 15.345 8.596 22.52c-7.422 1.694-15.436 3.058-23.88 4.071a382.417 382.417 0 0 0 7.859-13.026a347.403 347.403 0 0 0 7.425-13.565Zm-16.898 8.101a358.557 358.557 0 0 1-12.281 19.815a329.4 329.4 0 0 1-23.444.823c-7.967 0-15.716-.248-23.178-.732a310.202 310.202 0 0 1-12.513-19.846h.001a307.41 307.41 0 0 1-10.923-20.627a310.278 310.278 0 0 1 10.89-20.637l-.001.001a307.318 307.318 0 0 1 12.413-19.761c7.613-.576 15.42-.876 23.31-.876H128c7.926 0 15.743.303 23.354.883a329.357 329.357 0 0 1 12.335 19.695a358.489 358.489 0 0 1 11.036 20.54a329.472 329.472 0 0 1-11 20.722Zm22.56-122.124c8.572 4.944 11.906 24.881 6.52 51.026c-.344 1.668-.73 3.367-1.15 5.09c-10.622-2.452-22.155-4.275-34.23-5.408c-7.034-10.017-14.323-19.124-21.64-27.008a160.789 160.789 0 0 1 5.888-5.4c18.9-16.447 36.564-22.941 44.612-18.3ZM128 90.808c12.625 0 22.86 10.235 22.86 22.86s-10.235 22.86-22.86 22.86s-22.86-10.235-22.86-22.86s10.235-22.86 22.86-22.86Z"></path></svg>

========================================
File: components\CategoryNav.jsx
========================================

import React from 'react';

const CategoryNav = () => {

    const categories = [
        { id: 'all', label: 'ALL' },
        { id: 'appetizers', label: 'APPETIZERS' },
        { id: 'main-courses', label: 'MAIN COURSES' },
        { id: 'side-dishes', label: 'SIDE DISHES' },
        { id: 'desserts', label: 'DESSERTS' },
        { id: 'soups-salads', label: 'SOUPS & SALADS' },
        { id: 'beverages', label: 'BEVERAGES' },
        { id: 'snacks', label: 'SNACKS' },
        { id: 'vegetarian', label: 'VEGETARIAN' }
    ];

    const [activeCategory, setActiveCategory] = React.useState('all');

    return (
        <div className="w-full overflow-x-auto no-scrollbar mb-8">
            <div className="flex justify-center gap-4 p-2">
                {categories.map(category => (
                    <button
                        key={category.id}
                        onClick={() => setActiveCategory(category.id)}
                        className={`px-4 py-2 rounded-full text-sm font-medium transition-colors whitespace-nowrap
              ${activeCategory === category.id
                            ? 'bg-orange-100 text-orange-500'
                            : 'text-gray-500 hover:text-gray-700'
                        }`}

                        // bg-orange-100 text-orange-500  hover:bg-orange-200
                    >
                        {category.label}
                    </button>
                ))}
            </div>
        </div>
    );
};

export default CategoryNav;

========================================
File: components\DifficultyBadge.jsx
========================================

const DifficultyBadge = ({ level, isSelected, onClick }) => {
    const baseClasses = "px-4 py-2 rounded-full font-medium text-sm transition-all duration-200 cursor-pointer";
    const variants = {
        Easy: isSelected
            ? "bg-green-500 text-white"
            : "bg-green-100 text-green-600 hover:bg-green-200",
        Intermediate: isSelected
            ? "bg-yellow-500 text-white"
            : "bg-yellow-100 text-yellow-600 hover:bg-yellow-200",
        Advanced: isSelected
            ? "bg-red-500 text-white"
            : "bg-red-100 text-red-600 hover:bg-red-200"
    };

    return (
        <div
            className={`${baseClasses} ${variants[level]}`}
            onClick={onClick}
        >
            {level}
        </div>
    );
};

========================================
File: components\Navbar.jsx
========================================

import { useState, useEffect, useRef } from 'react';
import { Search, User, PlusSquare, Menu, X, Home, Utensils, Video, Heart, BookOpen, Settings, LogOut } from 'lucide-react';
import { useNavigate, useLocation } from 'react-router-dom';
import SearchInput from './SearchInput';

const Header = () => {
    const navigate = useNavigate();
    const location = useLocation();
    const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);
    const navbarRef = useRef(null);
    const [navbarHeight, setNavbarHeight] = useState(0);

    const navItems = [
        { icon: Home, label: 'Home', path: '/' },
        { icon: Utensils, label: 'My Recipes', path: '/my-recipes' },
        { icon: Video, label: 'Videos', path: '/videos' },
        { icon: Heart, label: 'Favorites', path: '/favorites' },
        // { icon: BookOpen, label: 'Cookbook', path: '/cookbook' },
    ];

    const bottomNavItems = [
        { icon: Settings, label: 'Settings', path: '/settings' },
        { icon: LogOut, label: 'Logout', path: '/logout' },
    ];

    const isActive = (path) => location.pathname === path;

    const handleNavigation = (path) => {
        navigate(path);
        setIsMobileMenuOpen(false);
    };

    const handleLogout = () => {
        if (window.confirm('Are you sure you want to logout?')) {
            navigate('/logout');
            setIsMobileMenuOpen(false);
        }
    };

    const handleMobileMenuToggle = () => {
        setIsMobileMenuOpen(prev => !prev);
    };

    useEffect(() => {
        setIsMobileMenuOpen(false);
    }, [location]);

    useEffect(() => {
        const updateNavbarHeight = () => {
            if (navbarRef.current) {
                setNavbarHeight(navbarRef.current.offsetHeight);
            }
        };

        updateNavbarHeight();
        window.addEventListener('resize', updateNavbarHeight);

        return () => {
            window.removeEventListener('resize', updateNavbarHeight);
        };
    }, []);

    return (
        <>
            <header ref={navbarRef} className="sticky z-50 top-0 bg-white shadow-sm">
                <div className="px-4 py-3 md:py-4">
                    <div className="flex items-center justify-between max-w-7xl mx-auto">
                        {/* Left Section: Logo and Menu Button */}
                        <div className="flex items-center gap-2">
                            <button
                                className="md:hidden p-2 hover:bg-gray-100 rounded-lg transition-colors"
                                onClick={handleMobileMenuToggle}
                                aria-expanded={isMobileMenuOpen}
                                aria-label="Toggle mobile menu"
                            >
                                {isMobileMenuOpen ? (
                                    <X className="h-6 w-6 text-gray-600" />
                                ) : (
                                    <Menu className="h-6 w-6 text-gray-600" />
                                )}
                            </button>
                            <h1
                                className="text-xl md:text-2xl font-bold text-gray-800 cursor-pointer hover:text-gray-600 transition-colors"
                                onClick={() => navigate('/')}
                            >
                                CookPal
                            </h1>
                        </div>

                        {/* Center Section: Search (Hidden on Mobile) */}
                        <div className="hidden md:block flex-1 max-w-2xl mx-8">
                            <div className="relative">
                                <Search className="absolute left-3 top-1/2 -translate-y-1/2 h-5 w-5 text-gray-400" />
                                <SearchInput />
                            </div>
                        </div>

                        {/* Right Section: Actions */}
                        <div className="flex items-center gap-3">
                            <button
                                onClick={() => navigate('/create-recipe')}
                                className="flex items-center justify-center gap-2 p-2 md:px-4 md:py-2 rounded-full transition-colors font-medium bg-orange-100 text-orange-500 hover:bg-orange-200"
                            >
                                <PlusSquare className="h-5 w-5" />
                                <span className="hidden md:block">Create Recipe</span>
                            </button>
                            <button
                                onClick={() => navigate('/profile')}
                                className="hidden md:block p-2 hover:bg-gray-100 rounded-full transition-colors"
                            >
                                <User className="h-6 w-6 text-gray-600" />
                            </button>
                        </div>
                    </div>
                </div>

                {/* Mobile Search Bar */}
                <div className="md:hidden px-4 pb-3">
                    <div className="relative">
                        <Search className="absolute left-3 top-1/2 -translate-y-1/2 h-5 w-5 text-gray-400" />
                        <SearchInput />
                    </div>
                </div>

                {/* Mobile Menu */}
                {isMobileMenuOpen && (
                    <div
                        className="md:hidden absolute left-0 right-0 bg-white border-b border-gray-200"
                        style={{ top: `${navbarHeight}px` }}
                    >
                        <nav className="p-4 space-y-1">
                            {navItems.map((item) => (
                                <button
                                    key={item.label}
                                    onClick={() => handleNavigation(item.path)}
                                    className={`flex items-center gap-3 w-full px-4 py-3 rounded-lg transition-colors text-orange-500 ${
                                        isActive(item.path)
                                            ? ' bg-orange-100'
                                            : 'hover:bg-orange-200'
                                    }`}
                                >
                                    <item.icon className="h-5 w-5" />
                                    {item.label}
                                </button>
                            ))}

                            <div className="border-t my-2" />

                            {bottomNavItems.map((item) => (
                                <button
                                    key={item.label}
                                    onClick={item.label === 'Logout' ? handleLogout : () => handleNavigation(item.path)}
                                    className={`flex items-center gap-3 w-full px-4 py-3 rounded-lg transition-colors ${
                                        isActive(item.path)
                                            ? 'bg-blue-50 text-blue-600 font-semibold'
                                            : 'text-gray-600 hover:bg-gray-50'
                                    }`}
                                >
                                    <item.icon className="h-5 w-5" />
                                    {item.label}
                                </button>
                            ))}
                        </nav>
                    </div>
                )}
            </header>
        </>
    );
};

export default Header;

========================================
File: components\RecipeCard.jsx
========================================

import React from 'react';
import { Clock, Heart } from 'lucide-react';
import { useNavigate } from "react-router-dom";

const RecipeCard = ({ recipe }) => {
    const navigate = useNavigate();

    const getBgColor = (category) => {
        switch (category.toLowerCase()) {
            case 'lunch':
                return 'bg-green-50';
            case 'main course':
                return 'bg-orange-50';
            case 'sidedish':
            case 'soup':
                return 'bg-red-50';
            default:
                return 'bg-gray-50';
        }
    };

    const getButtonColor = (category) => {
        switch (category.toLowerCase()) {
            case 'lunch':
                return 'bg-green-600 hover:bg-green-700';
            case 'main course':
                return 'bg-orange-600 hover:bg-orange-700';
            case 'sidedish':
            case 'soup':
                return 'bg-red-600 hover:bg-red-700';
            default:
                return 'bg-gray-600 hover:bg-gray-700';
        }
    };

    return (
        <div className={`relative overflow-hidden rounded-xl shadow-md hover:shadow-lg transition-all duration-300 ${getBgColor(recipe.category)}`}>
            {/* Owner Section */}
            <div className="p-4 flex items-center space-x-3 border-b border-gray-100">
                <div className="relative h-10 w-10 flex-shrink-0">
                    <img
                        src={recipe.authorAvatar}
                        alt={recipe.author}
                        className="rounded-full object-cover w-full h-full"
                    />
                </div>
                <div className="flex-1 min-w-0">
                    <h4 className="text-sm font-semibold text-gray-900 truncate">{recipe.author}</h4>
                    <p className="text-xs text-gray-500 font-medium">Recipe Creator</p>
                </div>
            </div>

            {/* Image Section */}
            <div className="relative aspect-video px-4 pt-4">
                <div className="relative h-full w-full rounded-t-xl overflow-hidden">
                    <img
                        src={recipe.image}
                        alt={recipe.title}
                        className="w-full h-full object-cover"
                    />
                    <div className="absolute inset-0 bg-gradient-to-t from-black/20 to-transparent" />
                    <button className="absolute top-3 right-3 p-2 rounded-full bg-white/90 hover:bg-white transition-colors shadow-sm">
                        <Heart className="h-5 w-5 text-rose-400 hover:text-rose-600" />
                    </button>
                    <div className="absolute bottom-3 left-3 flex items-center bg-white/90 px-3 py-1.5 rounded-full shadow-sm">
                        <Clock className="h-4 w-4 mr-1.5 text-gray-600" />
                        <span className="text-sm font-medium text-gray-700">{recipe.prepTime + recipe.cookTime} min</span>
                    </div>
                </div>
            </div>

            {/* Content Section */}
            <div className="p-4 space-y-4">
                <div className="space-y-2">
                    {/* Category & Difficulty */}
                    <div className="flex gap-2">
                        <span className={`px-2.5 py-1 rounded-full text-xs font-semibold ${getButtonColor(recipe.category)} text-white`}>
                            {recipe.category}
                        </span>
                        <span className="px-2.5 py-1 rounded-full text-xs font-semibold bg-gray-600 text-white">
                            {recipe.difficulty}
                        </span>
                    </div>

                    <h3 className="text-xl font-semibold text-gray-900 line-clamp-2">
                        {recipe.title}
                    </h3>
                    <p className="text-sm text-gray-600 line-clamp-2">
                        {recipe.description}
                    </p>
                </div>

                {/* Tags */}
                <div className="flex flex-wrap gap-2">
                    {recipe.tags?.map((tag, index) => (
                        <span
                            key={index}
                            className="px-2.5 py-1 rounded-full text-xs font-medium bg-white text-gray-600 border border-gray-200"
                        >
                            {tag}
                        </span>
                    ))}
                </div>

                {/* View Recipe Button */}
                <button onClick={() => navigate(`/recipe/${recipe.id}`)} className={`w-fit py-2 px-4 text-sm font-medium text-white rounded-lg transition-colors duration-200 ${getButtonColor(recipe.category)}`}>
                    View Recipe
                </button>
            </div>
        </div>
    );
};

export default RecipeCard;

========================================
File: components\SearchInput.jsx
========================================

import { useState, useEffect } from "react";

function SearchInput() {
    const [placeholderText, setPlaceholderText] = useState("What do you want to cook today?");

    useEffect(() => {
        const updatePlaceholder = () => {
            if (window.innerWidth < 768) {
                setPlaceholderText("Search Recipe");
            } else {
                setPlaceholderText("What do you want to cook today?");
            }
        };

        updatePlaceholder();

        window.addEventListener("resize", updatePlaceholder);

        return () => window.removeEventListener("resize", updatePlaceholder);
    }, []); // Empty dependency array means this runs once on mount

    return (
        <input
            type="text"
            placeholder={placeholderText}
            className="w-full pl-10 pr-4 py-2 rounded-full bg-gray-100 focus:outline-none focus:ring-2 focus:ring-blue-500"
        />
    );
}

export default SearchInput;

========================================
File: components\Sidebar.jsx
========================================

import React from 'react';
import { Home, Utensils, Video, Heart, BookOpen, Settings, LogOut } from 'lucide-react';
import { useNavigate, useLocation } from 'react-router-dom';

const Sidebar = ({ isCollapsed, toggleSidebar }) => {
    const navigate = useNavigate();
    const location = useLocation();

    const navItems = [
        { icon: Home, label: 'Home', path: '/' },
        { icon: Utensils, label: 'My Recipes', path: '/profile/' },
        { icon: Video, label: 'Videos', path: '/videos' },
        { icon: Heart, label: 'Favorites', path: '/favorites' },
        // { icon: BookOpen, label: 'Cookbook', path: '/' },
    ];

    const bottomNavItems = [
        { icon: Settings, label: 'Settings', path: '/settings' },
        { icon: LogOut, label: 'Logout', path: '/logout' },
    ];

    const isActive = (path) => location.pathname === path;

    return (
        <div
            className={`hidden md:flex flex-col justify-between h-screen bg-white border-r border-gray-200 py-6 px-4 fixed left-0 top-0 transition-all duration-300 ${
                isCollapsed ? 'w-20' : 'w-64'
            } md:top-[65px]`} // Adjust top-65px based on Navbar height
        >
            <div>
                {/* Header with Animated Toggle Button */}
                <div className="flex items-center justify-end px-4 mb-8">
                    <button
                        onClick={toggleSidebar} // Use the prop passed from AppContent
                        className="p-1 text-gray-600 hover:text-gray-800 focus:outline-none"
                    >
                        <div className="relative w-6 h-6 flex flex-col justify-center items-center">
                            <span
                                className={`absolute block w-6 h-0.5 bg-gray-600 transition-all duration-300 ${
                                    isCollapsed ? 'rotate-45 translate-y-0' : '-translate-y-2'
                                }`}
                            />
                            <span
                                className={`absolute block w-6 h-0.5 bg-gray-600 transition-all duration-300 ${
                                    isCollapsed ? 'opacity-0' : 'opacity-100'
                                }`}
                            />
                            <span
                                className={`absolute block w-6 h-0.5 bg-gray-600 transition-all duration-300 ${
                                    isCollapsed ? '-rotate-45 translate-y-0' : 'translate-y-2'
                                }`}
                            />
                        </div>
                    </button>
                </div>

                {/* Main Navigation */}
                <nav>
                    {navItems.map((item) => (
                        <button
                            key={item.label}
                            onClick={() => navigate(item.path)}
                            className={`flex items-center gap-3 w-full px-4 py-3 rounded-lg mb-2 transition-colors ${
                                isActive(item.path)
                                    ? 'bg-orange-100 text-orange-500'
                                    : 'text-gray-600 hover:bg-orange-200'
                            } ${isCollapsed ? 'justify-center' : ''}`}
                            title={isCollapsed ? item.label : ''}
                        >
                            <item.icon
                                className={`h-5 w-5 flex-shrink-0 ${
                                    isActive(item.path) ? 'text-orange-500' : 'text-gray-400'
                                }`}
                            />
                            {!isCollapsed && <span className="font-medium">{item.label}</span>}
                        </button>
                    ))}
                </nav>
            </div>

            {/* Bottom Navigation */}
            <nav>
                {bottomNavItems.map((item) => (
                    <button
                        key={item.label}
                        onClick={() => navigate(item.path)}
                        className={`flex items-center gap-3 w-full px-4 py-3 rounded-lg mb-2 transition-colors ${
                            isActive(item.path)
                                ? 'bg-orange-100 text-orange-500'
                                : 'text-gray-600 hover:bg-gray-50'
                        } ${isCollapsed ? 'justify-center' : ''}`}
                        title={isCollapsed ? item.label : ''}
                    >
                        <item.icon
                            className={`h-5 w-5 flex-shrink-0 ${
                                isActive(item.path) ? 'text-orange-500' : 'text-gray-400'
                            }`}
                        />
                        {!isCollapsed && <span className="font-medium">{item.label}</span>}
                    </button>
                ))}
            </nav>
        </div>
    );
};

export default Sidebar;

========================================
File: components\videoCard.jsx
========================================

import React from 'react';
import { Play, Heart } from 'lucide-react';
import { useNavigate } from 'react-router-dom';

const VideoCard = ({ video }) => {
    const navigate = useNavigate();

    const getBgColor = (category) => {
        switch (category.toLowerCase()) {
            case 'music':
                return 'bg-blue-50';
            case 'gaming':
                return 'bg-purple-50';
            case 'education':
                return 'bg-green-50';
            default:
                return 'bg-gray-50';
        }
    };

    const handleCardClick = () => {
        navigate(`/video/${video.id}`, { state: { video } });
    };

    return (
        <div
            className={`relative overflow-hidden rounded-xl shadow-md transition-all duration-300 ${getBgColor(
                video.category
            )} group hover:bg-gray-100 cursor-pointer`}
            onClick={handleCardClick}
        >
            {/* Thumbnail Section */}
            <div className="relative aspect-[16/12] px-2 pt-2 pb-4">
                <div className="relative h-full w-full rounded-lg overflow-hidden">
                    <img
                        src={video.thumbnail}
                        alt={video.title}
                        className="w-full h-full object-cover transition-opacity duration-300 group-hover:opacity-70"
                    />
                    {/* Dark overlay on hover */}
                    <div className="absolute inset-0 bg-black opacity-0 group-hover:opacity-50 transition-opacity duration-500" />

                    {/* Duration - Top Left, always visible */}
                    <div className="absolute top-3 left-3 flex items-center bg-white/90 group-hover:bg-white/70 px-3 py-1.5 rounded-full shadow-sm">
                        <Play className="h-4 w-4 mr-1.5 text-gray-600" />
                        <span className="text-sm font-medium text-gray-700">{video.duration}</span>
                    </div>

                    {/* Title and Description on Thumbnail */}
                    <div className="absolute -bottom-5 left-3 right-3 z-10">
                        <h3
                            className="text-lg font-semibold text-white transition-transform duration-700 group-hover:-translate-y-8"
                        >
                            {video.title}
                        </h3>
                        {/* Description - Shown just below title on hover */}
                        <p
                            className="text-sm text-white/90 line-clamp-2 mt-1 opacity-0 group-hover:opacity-100 transition-all duration-1000 group-hover:-translate-y-8"
                        >
                            {video.description}
                        </p>
                    </div>

                    {/* Heart Button */}
                    <button
                        className="absolute top-3 right-3 p-2 rounded-full bg-white/90 hover:bg-white transition-colors shadow-sm"
                        onClick={(e) => e.stopPropagation()} // Prevent card click when clicking heart
                    >
                        <Heart className="h-5 w-5 text-rose-400 hover:text-rose-600" />
                    </button>
                </div>
            </div>

            {/* Channel Section (Always visible) */}
            <div className="p-4 flex items-center space-x-3 border-t border-gray-100">
                <div className="relative h-10 w-10 flex-shrink-0">
                    <img
                        src={video.channelAvatar}
                        alt={video.channel}
                        className="rounded-full object-cover w-full h-full"
                    />
                </div>
                <div className="flex-1 min-w-0">
                    <h4 className="text-sm font-semibold text-gray-900 truncate">{video.channel}</h4>
                    <p className="text-xs text-gray-500 font-medium">Channel</p>
                </div>
            </div>
        </div>
    );
};

export default VideoCard;

========================================
File: data\recipes.js
========================================

const recipes = [
    {
    id: 1,
        author: "Chef Maria",
        username: "chefmaria",
        authorAvatar: "https:
        image: "https:
        title: "Homemade Pasta Carbonara",
        likes: 1234,
        category:"lunch",
        comments: 89,
        prepTime: 30,
        cookTime: 15,
        difficulty: "Intermediate",
        ingredients: [
        "200g spaghetti",
        "100g pancetta",
        "2 large eggs",
        "50g Pecorino Romano",
        "50g Parmigiano Reggiano",
        "Black pepper",
        "Salt"
    ],
        steps: [
        "Bring a large pot of salted water to boil",
        "Cook pasta according to package instructions",
        "Meanwhile, crisp the pancetta in a pan",
        "Mix eggs, cheese, and pepper in a bowl",
        "Combine hot pasta with egg mixture and pancetta"
    ],
        description: "Classic Italian carbonara made with fresh ingredients. A perfect comfort food for any day!"
}, {
    id: 2,
        author: "Baker John",
        username: "bakerjohn",
        authorAvatar: "https:
        image: "https:
        title: "Artisan Sourdough Bread",
        likes: 2156,
        category:"soup",
        comments: 167,
        prepTime: 120,
        cookTime: 45,
        difficulty: "Advanced",
        ingredients: [
        "500g bread flour",
        "350g water",
        "100g active sourdough starter",
        "10g salt"
    ],
        steps: [
        "Mix flour and water, let autolyse for 1 hour",
        "Add starter and salt, perform stretch and folds",
        "Bulk ferment for 4-6 hours",
        "Shape and cold proof overnight",
        "Bake in Dutch oven at 450°F"
    ],
        description: "Crusty on the outside, soft on the inside. 24-hour fermented sourdough bread."
},
    {
        id: 1,
        author: "Chef Maria",
        username: "chefmaria",
        authorAvatar: "https:
        image: "https:
        title: "Homemade Pasta Carbonara",
        likes: 1234,
        category:"lunch",
        comments: 89,
        prepTime: 30,
        cookTime: 15,
        difficulty: "Intermediate",
        ingredients: [
            "200g spaghetti",
            "100g pancetta",
            "2 large eggs",
            "50g Pecorino Romano",
            "50g Parmigiano Reggiano",
            "Black pepper",
            "Salt"
        ],
        steps: [
            "Bring a large pot of salted water to boil",
            "Cook pasta according to package instructions",
            "Meanwhile, crisp the pancetta in a pan",
            "Mix eggs, cheese, and pepper in a bowl",
            "Combine hot pasta with egg mixture and pancetta"
        ],
        description: "Classic Italian carbonara made with fresh ingredients. A perfect comfort food for any day!"
    }, {
        id: 2,
        author: "Baker John",
        username: "bakerjohn",
        authorAvatar: "https:
        image: "https:
        title: "Artisan Sourdough Bread",
        likes: 2156,
        category:"soup",
        comments: 167,
        prepTime: 120,
        cookTime: 45,
        difficulty: "Advanced",
        ingredients: [
            "500g bread flour",
            "350g water",
            "100g active sourdough starter",
            "10g salt"
        ],
        steps: [
            "Mix flour and water, let autolyse for 1 hour",
            "Add starter and salt, perform stretch and folds",
            "Bulk ferment for 4-6 hours",
            "Shape and cold proof overnight",
            "Bake in Dutch oven at 450°F"
        ],
        description: "Crusty on the outside, soft on the inside. 24-hour fermented sourdough bread."
    },

    {
        id: 1,
        author: "Chef Maria",
        username: "chefmaria",
        authorAvatar: "https:
        image: "https:
        title: "Homemade Pasta Carbonara",
        likes: 1234,
        category:"lunch",
        comments: 89,
        prepTime: 30,
        cookTime: 15,
        difficulty: "Intermediate",
        ingredients: [
            "200g spaghetti",
            "100g pancetta",
            "2 large eggs",
            "50g Pecorino Romano",
            "50g Parmigiano Reggiano",
            "Black pepper",
            "Salt"
        ],
        steps: [
            "Bring a large pot of salted water to boil",
            "Cook pasta according to package instructions",
            "Meanwhile, crisp the pancetta in a pan",
            "Mix eggs, cheese, and pepper in a bowl",
            "Combine hot pasta with egg mixture and pancetta"
        ],
        description: "Classic Italian carbonara made with fresh ingredients. A perfect comfort food for any day!"
    }, {
        id: 2,
        author: "Baker John",
        username: "bakerjohn",
        authorAvatar: "https:
        image: "https:
        title: "Artisan Sourdough Bread",
        likes: 2156,
        category:"soup",
        comments: 167,
        prepTime: 120,
        cookTime: 45,
        difficulty: "Advanced",
        ingredients: [
            "500g bread flour",
            "350g water",
            "100g active sourdough starter",
            "10g salt"
        ],
        steps: [
            "Mix flour and water, let autolyse for 1 hour",
            "Add starter and salt, perform stretch and folds",
            "Bulk ferment for 4-6 hours",
            "Shape and cold proof overnight",
            "Bake in Dutch oven at 450°F"
        ],
        description: "Crusty on the outside, soft on the inside. 24-hour fermented sourdough bread."
    }
];

export  default recipes

========================================
File: data\videos.js
========================================

const videos = [
    {
        id: "1",
        title: "How to Make Perfect Homemade Pizza from Scratch",
        thumbnail: "https:
        videoUrl: "https:
        author: "Chef Maria",
        username: "chefmaria",
        authorAvatar: "https:
        likes: 1234,
        category: "Food",
        comments: 89,
        prepTime: 30,
        cookTime: 15,
        difficulty: "Intermediate",
        ingredients: [
            "200g spaghetti",
            "100g pancetta",
            "2 large eggs",
            "50g Pecorino Romano",
            "50g Parmigiano Reggiano",
            "Black pepper",
            "Salt"
        ],
        steps: [
            "Bring a large pot of salted water to boil",
            "Cook pasta according to package instructions",
            "Meanwhile, crisp the pancetta in a pan",
            "Mix eggs, cheese, and pepper in a bowl",
            "Combine hot pasta with egg mixture and pancetta"
        ],
        description: "Learn how to make perfect homemade pizza from scratch in this comprehensive tutorial."
    },
    {
        id: "2",
        title: "Japanese Ramen: Traditional Recipe Guide",
        thumbnail: "https:
        videoUrl: "https:
        author: "Chef Maria",
        username: "chefmaria",
        authorAvatar: "https:
        likes: 850,
        category: "Food",
        comments: 45,
        prepTime: 20,
        cookTime: 40,
        difficulty: "Intermediate",
        ingredients: [
            "200g ramen noodles",
            "1L chicken broth",
            "100g pork belly",
            "2 tbsp soy sauce",
            "1 tbsp miso paste",
            "1 egg",
            "Nori sheets",
            "Green onions"
        ],
        steps: [
            "Boil the ramen noodles according to package instructions",
            "Simmer chicken broth with soy sauce and miso paste",
            "Cook pork belly until tender",
            "Soft-boil the egg and slice green onions",
            "Assemble ramen with broth, noodles, pork, egg, and toppings"
        ],
        description: "Dive into the traditional Japanese ramen recipe with step-by-step instructions."
    },
    {
        id: "3",
        title: "Ultimate Burger Recipe - Restaurant Quality at Home",
        thumbnail: "https:
        videoUrl: "https:
        author: "Chef Maria",
        username: "chefmaria",
        authorAvatar: "https:
        likes: 2000,
        category: "Food",
        comments: 120,
        prepTime: 15,
        cookTime: 10,
        difficulty: "Easy",
        ingredients: [
            "500g ground beef",
            "4 burger buns",
            "1 tomato",
            "1 onion",
            "4 slices cheddar cheese",
            "Lettuce leaves",
            "Salt",
            "Pepper",
            "Ketchup"
        ],
        steps: [
            "Season ground beef with salt and pepper, form into patties",
            "Grill patties for 4-5 minutes per side",
            "Toast burger buns lightly",
            "Slice tomato and onion",
            "Assemble burgers with patties, cheese, veggies, and ketchup"
        ],
        description: "Create restaurant-quality burgers at home with this ultimate guide."
    },
    {
        id: "5",
        title: "Authentic Thai Green Curry Recipe",
        thumbnail: "https:
        videoUrl: "https:
        author: "Chef Maria",
        username: "chefmaria",
        authorAvatar: "https:
        likes: 950,
        category: "Food",
        comments: 67,
        prepTime: 25,
        cookTime: 20,
        difficulty: "Moderate",
        ingredients: [
            "400ml coconut milk",
            "200g chicken breast",
            "2 tbsp green curry paste",
            "1 tbsp fish sauce",
            "1 tsp sugar",
            "1 eggplant",
            "Thai basil leaves",
            "1 red chili"
        ],
        steps: [
            "Heat coconut milk in a pan and stir in green curry paste",
            "Add sliced chicken and cook until tender",
            "Stir in fish sauce and sugar",
            "Add chopped eggplant and simmer until soft",
            "Garnish with Thai basil and sliced red chili before serving"
        ],
        description: "Experience the authentic flavors of Thai green curry with this recipe."
    },
    {
        id: "6",
        title: "French Croissants: Professional Baker's Guide",
        thumbnail: "https:
        videoUrl: "https:
        author: "Chef Maria",
        username: "chefmaria",
        authorAvatar: "https:
        likes: 1100,
        category: "Food",
        comments: 78,
        prepTime: 60,
        cookTime: 25,
        difficulty: "Advanced",
        ingredients: [
            "500g all-purpose flour",
            "250g unsalted butter",
            "10g salt",
            "50g sugar",
            "25g fresh yeast",
            "250ml cold water",
            "1 egg (for egg wash)"
        ],
        steps: [
            "Mix flour, salt, sugar, yeast, and water to form a dough",
            "Roll out dough and encase butter in layers",
            "Fold and roll the dough several times, chilling between steps",
            "Shape into croissants and let rise",
            "Brush with egg wash and bake at 200°C for 20-25 minutes"
        ],
        description: "Learn how to make French croissants like a professional baker."
    },
    {
        id: "7",
        title: "Quick Vegan Stir-Fry in 20 Minutes",
        thumbnail: "https:
        videoUrl: "https:
        author: "Chef Maria",
        username: "chefmaria",
        authorAvatar: "https:
        likes: 670,
        category: "Food",
        comments: 34,
        prepTime: 10,
        cookTime: 10,
        difficulty: "Easy",
        ingredients: [
            "200g tofu",
            "1 bell pepper",
            "1 carrot",
            "100g broccoli",
            "2 tbsp soy sauce",
            "1 tbsp sesame oil",
            "1 tsp ginger",
            "Rice (optional)"
        ],
        steps: [
            "Cube tofu and stir-fry in sesame oil until golden",
            "Slice bell pepper and carrot, chop broccoli",
            "Add vegetables to the pan with ginger",
            "Stir in soy sauce and cook for 5-7 minutes",
            "Serve hot, optionally with rice"
        ],
        description: "A fast and delicious vegan stir-fry recipe ready in just 20 minutes."
    },
    {
        id: "8",
        title: "Classic Chocolate Cake Recipe",
        thumbnail: "https:
        videoUrl: "https:
        author: "Chef Maria",
        username: "chefmaria",
        authorAvatar: "https:
        likes: 1450,
        category: "Food",
        comments: 95,
        prepTime: 20,
        cookTime: 35,
        difficulty: "Moderate",
        ingredients: [
            "200g all-purpose flour",
            "200g sugar",
            "75g cocoa powder",
            "2 eggs",
            "100ml vegetable oil",
            "250ml milk",
            "1 tsp baking powder",
            "1 tsp vanilla extract"
        ],
        steps: [
            "Preheat oven to 180°C and grease a cake pan",
            "Mix flour, cocoa, baking powder, and sugar",
            "Beat eggs, oil, milk, and vanilla, then combine with dry ingredients",
            "Pour batter into the pan and bake for 35 minutes",
            "Cool and serve, optionally with frosting"
        ],
        description: "Bake a classic chocolate cake with this easy-to-follow recipe."
    }
];

export default videos;

========================================
File: features\auth\authSlice.js
========================================

import { createSlice, createAsyncThunk } from "@reduxjs/toolkit";
import { apiRequest } from "../../utils/api";
import { toast } from "react-toastify";

const initialState = {
  user: null,
  accessToken: null,
  isAuthenticated: false,
  loading: false,
  error: null,
};

export const registerUser = createAsyncThunk(
  "auth/register",
  async (formData, { rejectWithValue, dispatch }) => {
    try {
      const response = await apiRequest(
        "/users/register",
        "POST",
        formData,
        dispatch
      );
      return response;
    } catch (error) {
      return rejectWithValue(error.message || "Registration failed");
    }
  }
);

export const loginUser = createAsyncThunk(
  "auth/login",
  async (credentials, { rejectWithValue, dispatch }) => {
    try {
      const response = await apiRequest(
        "/users/login",
        "POST",
        credentials,
        dispatch
      );
      return response;
    } catch (error) {
      return rejectWithValue(error.message || "Login failed");
    }
  }
);

export const logoutUserAsync = createAsyncThunk(
  "auth/logout",
  async (_, { rejectWithValue, dispatch }) => {
    try {
      const response = await apiRequest(
        "/users/logout",
        "POST",
        null,
        dispatch
      );
      return response;
    } catch (error) {
      return rejectWithValue(error.message || "Logout failed");
    }
  }
);

const authSlice = createSlice({
  name: "auth",
  initialState,
  reducers: {
    setUser: (state, { payload }) => {
      state.user = payload.user;
      state.accessToken = payload.token;
      state.isAuthenticated = true;
    },
    setAuthenticated: (state, action) => {
      state.isAuthenticated = action.payload;
    },
    logoutUser: (state) => {
      state.user = null;
      state.accessToken = null;
      state.isAuthenticated = false;
      localStorage.removeItem("accessToken");
    },
  },
  extraReducers: (builder) => {
    builder
      .addCase(registerUser.pending, (state) => {
        state.loading = true;
        state.error = null;
      })
      .addCase(registerUser.fulfilled, (state, { payload }) => {
        state.loading = false;
        state.user = payload.data;
        state.isAuthenticated = true;
        toast.success("Registration successful!");
      })
      .addCase(registerUser.rejected, (state, { payload }) => {
        state.loading = false;
        state.error = payload;
        toast.error(payload);
      })
      .addCase(loginUser.pending, (state) => {
        state.loading = true;
        state.error = null;
      })
      .addCase(loginUser.fulfilled, (state, { payload }) => {
        state.loading = false;
        state.user = payload.data.user;
        state.accessToken = payload.data.accessToken;
        state.isAuthenticated = true;
        localStorage.setItem("accessToken", payload.data.accessToken);
        toast.success("Login successful!");
      })
      .addCase(loginUser.rejected, (state, { payload }) => {
        state.loading = false;
        state.error = payload;
        state.isAuthenticated = false;
        toast.error(payload);
      })
      .addCase(logoutUserAsync.pending, (state) => {
        state.loading = true;
        state.error = null;
      })
      .addCase(logoutUserAsync.fulfilled, (state) => {
        state.loading = false;
        state.user = null;
        state.accessToken = null;
        state.isAuthenticated = false;
        localStorage.removeItem("accessToken");
        toast.success("Logged out successfully!");
      })
      .addCase(logoutUserAsync.rejected, (state, { payload }) => {
        state.loading = false;
        state.error = payload;
        toast.error(payload);
      });
  },
});

export const { setUser, setAuthenticated, logoutUser } = authSlice.actions;
export default authSlice.reducer;


========================================
File: features\auth\registerUser.js
========================================

import { createSlice, createAsyncThunk } from "@reduxjs/toolkit";

export const registerUser = createAsyncThunk(
  "auth/register",
  async (formData, { rejectWithValue }) => {
    try {
      const response = await fetch(
        `${import.meta.env.VITE_API_URL}/users/register`,
        {
          method: "POST",
          body: formData,
        }
      );

      const data = await response.json();

      if (!response.ok) {
        return rejectWithValue(data.message || "Registration failed");
      }

      return data;
    } catch (error) {
      return rejectWithValue(error.message);
    }
  }
);

const authSlice = createSlice({
  name: "auth",
  initialState: {
    user: null,
    isAuthenticated: false,
    loading: false,
    error: null,
  },
  reducers: {
    clearError: (state) => {
      state.error = null;
    },
  },
  extraReducers: (builder) => {
    builder
      .addCase(registerUser.pending, (state) => {
        state.loading = true;
        state.error = null;
      })
      .addCase(registerUser.fulfilled, (state, action) => {
        state.loading = false;
        state.isAuthenticated = true;
        state.user = action.payload.data;
      })
      .addCase(registerUser.rejected, (state, action) => {
        state.loading = false;
        state.error = action.payload;
      });
  },
});

export const { clearError } = authSlice.actions;
export default authSlice.reducer;


========================================
File: features\recipes\recipeSlice.js
========================================

import { createSlice, createAsyncThunk } from "@reduxjs/toolkit";
import { apiRequest } from "../../utils/api";
import { toast } from "react-toastify";

const recipeSlice = createSlice({
  name: "recipes",
  initialState: {
    recipes: [],
    loading: false,
    error: null,
  },
  reducers: {},
  extraReducers: (builder) => {
    builder

      .addCase(fetchRecipes.pending, (state) => {
        state.loading = true;
        state.error = null;
      })
      .addCase(fetchRecipes.fulfilled, (state, { payload }) => {
        state.loading = false;
        state.recipes = payload.data.recipes;
      })
      .addCase(fetchRecipes.rejected, (state, { error }) => {
        state.loading = false;
        state.error = error.message;
      })

      .addCase(publishRecipe.pending, (state) => {
        state.loading = true;
        state.error = null;
      })
      .addCase(publishRecipe.fulfilled, (state, { payload }) => {
        state.loading = false;
        state.recipes.unshift(payload.data);
        toast.success("Recipe published successfully");
      })
      .addCase(publishRecipe.rejected, (state, { error }) => {
        state.loading = false;
        state.error = error.message;
        toast.error(error.message);
      });
  },
});

export const fetchRecipes = createAsyncThunk(
  "recipes/fetchAll",
  async (_, { rejectWithValue }) => {
    try {
      const response = await apiRequest("/recipes?type=video");
      if (!response.ok) throw new Error("Failed to fetch recipes");
      return await response.json();
    } catch (error) {
      return rejectWithValue(error.message);
    }
  }
);

export const publishRecipe = createAsyncThunk(
  "recipes/publish",
  async (recipeData, { rejectWithValue }) => {
    try {
      const formData = new FormData();
      Object.entries(recipeData).forEach(([key, value]) => {
        if (Array.isArray(value)) {
          value.forEach((item) => formData.append(key, item));
        } else {
          formData.append(key, value);
        }
      });

      const response = await apiRequest("/recipes/publish", {
        method: "POST",
        body: formData,
      });

      if (!response.ok) throw new Error("Failed to publish recipe");
      return await response.json();
    } catch (error) {
      return rejectWithValue(error.message);
    }
  }
);

export default recipeSlice.reducer;


========================================
File: pages\FavoritesPage.jsx
========================================

import React, { useState } from 'react';
import VideoCard from '../components/VideoCard';
import RecipeCard from '../components/RecipeCard';
import { Heart } from 'lucide-react';

const FavoritesPage = () => {
    const [activeTab, setActiveTab] = useState('videos');

    const favorites = [
        // Video Example
        {
            id: 1,
            type: 'video',
            title: 'Perfect Homemade Pizza',
            thumbnail: 'https://images.unsplash.com/photo-1513104890138-7c749659a591',
            duration: '12:30',
            category: 'Food',
            channel: 'Cooking Master',
            channelAvatar: 'https://via.placeholder.com/40',
            description: 'Learn to make authentic Italian pizza at home',
            likes: 1500,
            videoUrl: '/pizza-video.mp4'
        },
        // Recipe Example
        {
            id: 2,
            type: 'recipe',
            title: 'Classic Carbonara',
            category: 'Main Course',
            difficulty: 'Intermediate',
            prepTime: 15,
            cookTime: 20,
            author: 'Chef Maria',
            authorAvatar: 'https://via.placeholder.com/40',
            image: 'https://images.unsplash.com/photo-1506368249639-73a05d6f6488',
            description: 'Creamy Roman pasta dish with pancetta',
            tags: ['Italian', 'Pasta', 'Quick Meal']
        }
    ];

    const favoriteVideos = favorites.filter(item => item.type === 'video');
    const favoriteRecipes = favorites.filter(item => item.type === 'recipe');

    return (
        <div className="min-h-screen bg-gray-50">
            <div className="container mx-auto px-4 py-8">
                {/* Header Section */}
                <div className="mb-8 text-center">
                    <div className="inline-flex items-center bg-orange-100 text-orange-500 px-6 py-2 rounded-full mb-4">
                        <Heart className="h-5 w-5 mr-2" />
                        <h1 className="text-2xl font-bold">Your Favorites</h1>
                    </div>

                    {/* Tab Navigation */}
                    <div className="flex justify-center gap-4 border-b border-gray-200 pb-4">
                        <button
                            onClick={() => setActiveTab('videos')}
                            className={`px-6 py-2 rounded-full text-sm font-medium transition-colors ${
                                activeTab === 'videos'
                                    ? 'bg-orange-100 text-orange-500'
                                    : 'text-gray-500 hover:text-gray-700'
                            }`}
                        >
                            Videos ({favoriteVideos.length})
                        </button>
                        <button
                            onClick={() => setActiveTab('recipes')}
                            className={`px-6 py-2 rounded-full text-sm font-medium transition-colors ${
                                activeTab === 'recipes'
                                    ? 'bg-orange-100 text-orange-500'
                                    : 'text-gray-500 hover:text-gray-700'
                            }`}
                        >
                            Recipes ({favoriteRecipes.length})
                        </button>
                    </div>
                </div>

                {/* Content Section */}
                <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">
                    {activeTab === 'videos' ? (
                        favoriteVideos.length > 0 ? (
                            favoriteVideos.map(video => (
                                <VideoCard
                                    key={`video-${video.id}`}
                                    video={video}
                                />
                            ))
                        ) : (
                            <div className="col-span-full text-center py-12 text-gray-500">
                                <Heart className="h-12 w-12 mx-auto text-gray-300 mb-4" />
                                <p className="text-lg">No favorite videos found</p>
                                <p className="text-sm mt-2">Start adding favorites by clicking the ♡ icon!</p>
                            </div>
                        )
                    ) : (
                        favoriteRecipes.length > 0 ? (
                            favoriteRecipes.map(recipe => (
                                <RecipeCard
                                    key={`recipe-${recipe.id}`}
                                    recipe={recipe}
                                />
                            ))
                        ) : (
                            <div className="col-span-full text-center py-12 text-gray-500">
                                <Heart className="h-12 w-12 mx-auto text-gray-300 mb-4" />
                                <p className="text-lg">No favorite recipes found</p>
                                <p className="text-sm mt-2">Save your favorite recipes using the ♡ button!</p>
                            </div>
                        )
                    )}
                </div>
            </div>
        </div>
    );
};

export default FavoritesPage;

========================================
File: pages\Home.jsx
========================================

import { useRef } from "react";
import { ArrowLeft, ArrowRight } from "lucide-react";
import RecipeCard from "../components/RecipeCard";
import recipes from "../data/recipes.js";
import CategoryNav from "../components/CategoryNav.jsx";

const HomePage = () => {
  const trendingRef = useRef(null);
  const recommendedRef = useRef(null);

  const scroll = (ref, direction) => {
    if (ref.current) {
      const scrollAmount = direction === "left" ? -300 : 300;
      ref.current.scrollBy({ left: scrollAmount, behavior: "smooth" });
    }
  };

  return (
    // <div className="min-h-screen bg-gray-50">
    //     <Sidebar />
    //     <div className="flex-1 md:ml-64">
    <main className="container mx-auto px-4 py-8">
      <CategoryNav />
      <section className="mb-8">
        <div className="flex items-center justify-between mb-4">
          <h2 className="text-2xl font-bold">Recommended Recipes</h2>
          <div className="gap-2 hidden md:block">
            <button
              onClick={() => scroll(recommendedRef, "left")}
              className="bg-orange-100 rounded-xl  px-5 py-2 hover:orange-500 group mr-2"
            >
              <ArrowLeft className="h-5 w-5 text-orange-300 group-hover:text-orange-500" />
            </button>
            <button
              onClick={() => scroll(recommendedRef, "right")}
              className="bg-orange-100 rounded-xl  px-5 py-2 hover:orange-500 group "
            >
              <ArrowRight className="h-5 w-5 text-orange-300 group-hover:text-orange-500" />
            </button>
          </div>
        </div>
        <div
          ref={recommendedRef}
          className="flex flex-col md:flex-row overflow-x-auto pb-4 gap-6 no-scrollbar"
          style={{
            msOverflowStyle: "none" /* IE and Edge */,
            scrollbarWidth: "none" /* Firefox */,
          }}
        >
          {recipes.map((recipe) => (
            <div key={recipe.id} className="min-w-[300px]">
              <RecipeCard recipe={recipe} />
            </div>
          ))}
        </div>
      </section>

      {/* Trending Recipes */}
      <section className="mb-8">
        <div className="flex items-center justify-between mb-4">
          <h2 className="text-2xl font-bold">Trending Now</h2>
          <div className="gap-4 hidden md:block">
            <button
              onClick={() => scroll(trendingRef, "left")}
              className="bg-orange-100 rounded-xl  px-5 py-2 hover:orange-500 group mr-2"
            >
              <ArrowLeft className="text-orange-300 group-hover:text-orange-500" />
            </button>
            <button
              onClick={() => scroll(trendingRef, "right")}
              className="bg-orange-100 rounded-xl  px-5 py-2 hover:orange-500 group"
            >
              <ArrowRight className="text-orange-300 group-hover:text-orange-500" />
            </button>
          </div>
        </div>
        <div
          ref={trendingRef}
          className="flex flex-col md:flex-row overflow-x-auto pb-4 gap-6 no-scrollbar"
          style={{
            msOverflowStyle: "none",
            scrollbarWidth: "none",
          }}
        >
          {recipes.map((recipe) => (
            <div key={recipe.id} className="min-w-[300px]">
              <RecipeCard recipe={recipe} />
            </div>
          ))}
        </div>
      </section>
    </main>
    // </div>
    // </div>
  );
};

export default HomePage;

// Home.jsx
// import React, { useEffect } from "react";
// import { useDispatch, useSelector } from "react-redux";
// import RecipeCard from "../components/RecipeCard";
// import { getRecipes } from "../features/recipes/recipeSlice";

// const Home = () => {
//   const dispatch = useDispatch();
//   const { recipes, loading, error } = useSelector((state) => state.recipes);

//   useEffect(() => {
//     dispatch(getRecipes({ page: 1, limit: 10 }));
//   }, [dispatch]);

//   return (
//     <div className="container mx-auto px-4 py-6">
//       <h1 className="text-3xl font-bold mb-6">Explore Recipes</h1>
//       {loading && <p>Loading...</p>}
//       {error && <p className="text-red-500">{error}</p>}
//       <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">
//         {recipes.map((recipe) => (
//           <RecipeCard
//             key={recipe._id}
//             recipe={{
//               id: recipe._id,
//               title: recipe.title,
//               description: recipe.description,
//               category: recipe.category,
//               difficulty: recipe.difficulty,
//               prepTime: recipe.prepTime,
//               cookTime: recipe.cookTime,
//               author: recipe.owner.username,
//               authorAvatar:
//                 recipe.owner.avatar || "https://via.placeholder.com/40",
//               image: recipe.mediaFile,
//             }}
//           />
//         ))}
//       </div>
//     </div>
//   );
// };

// export default Home;


========================================
File: pages\Login.jsx
========================================

// import React, { useState, useEffect } from "react";
// import { Lock, Mail, Eye, EyeOff } from "lucide-react";
// import { useDispatch, useSelector } from "react-redux";
// import { useNavigate, Link } from "react-router-dom";
// import { loginUser } from "../features/auth/authSlice";

// const Login = () => {
//   const [loginId, setLoginId] = useState("");
//   const [password, setPassword] = useState("");
//   const [showPassword, setShowPassword] = useState(false);
//   const [formError, setFormError] = useState("");

//   const dispatch = useDispatch();
//   const navigate = useNavigate();
//   const { isLoading, isAuthenticated, error } = useSelector(
//     (state) => state.auth
//   );

//   // Update form error if redux error changes
//   useEffect(() => {
//     if (error) {
//       setFormError(error);
//     }
//   }, [error]);

//   // Redirect if authenticated
//   useEffect(() => {
//     if (isAuthenticated) {
//       navigate("/");
//     }
//   }, [isAuthenticated, navigate]);

//   const handleSubmit = (e) => {
//     e.preventDefault();
//     setFormError("");

//     if (!loginId || !password) {
//       setFormError("Please fill in all fields.");
//       return;
//     }

//     dispatch(loginUser({ loginId, password }));
//   };

//   return (
//     <div className="flex items-center justify-center min-h-screen bg-gray-100 px-4">
//       <div className="w-full max-w-md p-8 space-y-8 bg-white rounded-2xl shadow-lg">
//         <div className="text-center">
//           <h1 className="text-3xl font-bold text-gray-900">Login</h1>
//         </div>
//         <form className="mt-8 space-y-6" onSubmit={handleSubmit}>
//           <div className="relative">
//             <Mail
//               className="absolute left-3 top-1/2 -translate-y-1/2 text-gray-400"
//               size={20}
//             />
//             <input
//               type="text"
//               id="loginId"
//               name="loginId"
//               placeholder="Email or Username"
//               value={loginId}
//               onChange={(e) => setLoginId(e.target.value)}
//               className="w-full pl-10 pr-4 py-3 rounded-xl border border-gray-200 focus:ring-2 focus:ring-orange-500"
//             />
//           </div>
//           <div className="relative">
//             <Lock
//               className="absolute left-3 top-1/2 -translate-y-1/2 text-gray-400"
//               size={20}
//             />
//             <input
//               type={showPassword ? "text" : "password"}
//               id="password"
//               name="password"
//               placeholder="Password"
//               value={password}
//               onChange={(e) => setPassword(e.target.value)}
//               className="w-full pl-10 pr-10 py-3 rounded-xl border border-gray-200 focus:ring-2 focus:ring-orange-500"
//             />
//             <button
//               type="button"
//               onClick={() => setShowPassword(!showPassword)}
//               className="absolute right-3 top-1/2 -translate-y-1/2 p-2"
//             >
//               {showPassword ? (
//                 <EyeOff size={20} className="text-gray-400" />
//               ) : (
//                 <Eye size={20} className="text-gray-400" />
//               )}
//             </button>
//           </div>
//           {formError && (
//             <div className="text-red-500 text-sm text-center">{formError}</div>
//           )}
//           <div>
//             <button
//               type="submit"
//               className="w-full bg-orange-500 hover:bg-orange-600 text-white font-medium py-3 px-4 rounded-xl transition duration-200"
//               disabled={isLoading}
//             >
//               {isLoading ? "Logging in..." : "Login"}
//             </button>
//           </div>
//           <div className="text-center text-sm text-gray-600">
//             Don't have an account?{" "}
//             <Link
//               to="/signup"
//               className="font-medium text-orange-500 hover:text-orange-600"
//             >
//               Sign up
//             </Link>
//           </div>
//         </form>
//       </div>
//     </div>
//   );
// };

// export default Login;
// File: pages/Login.jsx
import React, { useState, useEffect } from "react";
import { Mail, Lock, Eye, EyeOff } from "lucide-react";
import { useNavigate } from "react-router-dom";
import { useDispatch, useSelector } from "react-redux";
import { loginUser } from "../features/auth/authSlice";

const Login = () => {
  const [emailOrUsername, setEmailOrUsername] = useState("");
  const [password, setPassword] = useState("");
  const [showPassword, setShowPassword] = useState(false);

  const navigate = useNavigate();
  const dispatch = useDispatch();
  const { loading, error, isAuthenticated } = useSelector(
    (state) => state.auth
  );

  useEffect(() => {
    if (isAuthenticated) {
      navigate("/");
    }
  }, [isAuthenticated, navigate]);

  const handleSubmit = async (e) => {
    e.preventDefault();

    if (!emailOrUsername || !password) {
      return;
    }

    const credentials = {
      [emailOrUsername.includes("@") ? "email" : "username"]: emailOrUsername,
      password,
    };

    dispatch(loginUser(credentials));
  };

  const togglePasswordVisibility = () => {
    setShowPassword(!showPassword);
  };

  return (
    <div className="min-h-screen flex items-center justify-center bg-gradient-to-r from-orange-[250] to-yellow-300 p-4">
      <div className="w-full max-w-md bg-white rounded-3xl shadow-xl p-8 md:px-10 md:py-7">
        <h1 className="text-3xl font-bold text-gray-800 mb-2 text-center">
          Sign In
        </h1>
        <p className="text-gray-600 mb-4 text-center">Welcome back!</p>

        <form onSubmit={handleSubmit} className="space-y-6">
          <div>
            <label htmlFor="emailOrUsername" className="sr-only">
              Email or Username
            </label>
            <div className="relative">
              <Mail className="absolute left-3 top-1/2 -translate-y-1/2 h-5 w-5 text-gray-400" />
              <input
                type="text"
                id="emailOrUsername"
                placeholder="Email or Username"
                value={emailOrUsername}
                onChange={(e) => setEmailOrUsername(e.target.value)}
                className="w-full pl-10 pr-4 py-3 rounded-xl border border-gray-200 focus:ring-2 focus:ring-orange-500 focus:border-orange-500 transition-all"
                required
              />
            </div>
          </div>

          <div>
            <label htmlFor="password" className="sr-only">
              Password
            </label>
            <div className="relative">
              <Lock className="absolute left-3 top-1/2 -translate-y-1/2 h-5 w-5 text-gray-400" />
              <input
                type={showPassword ? "text" : "password"}
                id="password"
                placeholder="Password"
                value={password}
                onChange={(e) => setPassword(e.target.value)}
                className="w-full pl-10 pr-10 py-3 rounded-xl border border-gray-200 focus:ring-2 focus:ring-orange-500 focus:border-orange-500 transition-all"
                required
              />
              <button
                type="button"
                className="absolute right-3 top-1/2 -translate-y-1/2 p-2 text-gray-500 hover:text-gray-700 focus:outline-none"
                onClick={togglePasswordVisibility}
              >
                {showPassword ? (
                  <EyeOff className="h-5 w-5" />
                ) : (
                  <Eye className="h-5 w-5" />
                )}
              </button>
            </div>
          </div>

          {error && (
            <div
              className="bg-red-100 border-l-4 border-red-500 text-red-700 p-2 rounded-md"
              role="alert"
            >
              <p>{error}</p>
            </div>
          )}

          <button
            type="submit"
            className="w-full py-3.5 bg-orange-500 text-white rounded-xl font-medium hover:bg-orange-600 transition-all disabled:bg-orange-300"
            disabled={loading}
          >
            {loading ? "Signing In..." : "Sign In"}
          </button>

          <p className="text-center text-sm text-gray-600 mt-4">
            Don’t have an account?{" "}
            <a
              href="#"
              className="text-orange-600 font-medium hover:underline"
              onClick={() => navigate("/signup")}
            >
              Sign up
            </a>
          </p>
        </form>
      </div>
    </div>
  );
};

export default Login;


========================================
File: pages\RecipeDetails.jsx
========================================

import { useParams, Link } from 'react-router-dom';
import { ChefHat, Heart, Bookmark, Share2, Clock, ArrowLeft } from 'lucide-react';
import recipes from "../data/recipes.js";

function RecipeDetails() {
  const { recipeId } = useParams();
  const recipe = recipes.find(r => r.id === parseInt(recipeId));

  if (!recipe) {
    return (
        <div className="min-h-screen flex items-center justify-center bg-gray-50">
          <h1 className="text-4xl font-bold text-gray-800">Recipe not found</h1>
        </div>
    );
  }

  return (
      <div className="min-h-screen bg-gray-50">
        {/* Back Button */}
        <Link
            to="/"
            className="fixed top-4 left-4 z-50 flex items-center space-x-2 bg-white/90 backdrop-blur-sm px-3 py-2 rounded-full shadow-lg hover:shadow-md transition-all duration-300 md:hover:-translate-x-1 md:px-4"
        >
          <ArrowLeft className="h-5 w-5 text-gray-700" />
          <span className="text-gray-700 font-medium">All Recipes</span>
        </Link>

        <main className="container mx-auto p-4 md:p-8 pt-16 md:pt-8">
          <div className="flex flex-col md:flex-row gap-6 md:gap-12">
            {/* Image Section */}
            <div className="w-full md:w-1/2 lg:w-[45%] md:sticky md:top-20 self-start">
              <div className="relative group">
                <img
                    src={recipe.image}
                    alt={recipe.title}
                    className="w-full max-h-[400px] md:h-[400px] object-cover rounded-2xl md:rounded-3xl shadow-lg md:shadow-xl transform transition-transform duration-300 md:hover:scale-[1.01]"
                />
                {/* Mobile Floating Actions */}
                <div className="md:hidden absolute bottom-4 right-4 flex space-x-2">
                  <button
                      className="p-2 bg-white/90 backdrop-blur-sm rounded-lg shadow-md active:scale-95 transition-transform">
                    <Share2 className="h-5 w-5 text-gray-700"/>
                  </button>
                  <button
                      className="p-2 bg-white/90 backdrop-blur-sm rounded-lg shadow-md active:scale-95 transition-transform">
                    <Bookmark className="h-5 w-5 text-gray-700"/>
                  </button>
                </div>
                <div
                    className="absolute bottom-4 left-4 flex items-center space-x-3 bg-white/90 backdrop-blur-sm px-4 py-2 rounded-xl shadow-md">
                  <button className="active:scale-95 transition-transform">
                    <Heart className="h-6 w-6 text-red-500"/>
                  </button>
                  <span className="font-bold text-gray-800 text-base md:text-lg">
                  {recipe.likes.toLocaleString()}
                </span>
                </div>
              </div>

              <div className="bg-white p-4 rounded-xl shadow-sm border border-gray-100 md:border-none md:bg-transparent md:p-2 mt-5 ">
                <div className="flex items-center justify-between">
                  <div className="flex items-center space-x-3 md:space-x-4">
                    <img
                        src={recipe.authorAvatar}
                        alt={recipe.author}
                        className="w-12 h-12 md:w-14 md:h-14 rounded-full object-cover border-2 border-white shadow-lg"
                    />
                    <div>
                      <div className="flex flex-col">
                        <h2 className="text-lg md:text-xl font-bold text-gray-900">
                          {recipe.author}
                        </h2>
                        <span className="text-gray-500 text-sm md:text-base">
                        @{recipe.username}
                      </span>
                      </div>
                      <div className="mt-1 flex items-center space-x-2">
                        <Clock className="h-4 w-4 text-gray-400"/>
                        <span className="text-sm text-gray-500">
                        {new Date(recipe.date).toLocaleDateString('en-US', {
                          year: 'numeric',
                          month: 'long',
                          day: 'numeric'
                        })}
                      </span>
                      </div>
                    </div>
                  </div>
                  <button
                      className="hidden md:flex items-center space-x-2 px-4 py-2 bg-blue-100 hover:bg-blue-200 text-blue-600 rounded-full transition-colors">
                    <span className="font-medium">Follow</span>
                    <ChefHat className="h-5 w-5"/>
                  </button>
                </div>
                <button
                    className="mt-3 w-full md:hidden px-4 py-2 bg-blue-100 hover:bg-blue-200 text-blue-600 rounded-lg transition-colors font-medium">
                  Follow Chef
                </button>
              </div>

            </div>

            {/* Content Section */}
            <div className="w-full md:w-1/2 lg:w-[55%] space-y-6 md:space-y-8">
              {/* Author Section */}

              {/* Recipe Header */}
              <div className="space-y-3 md:space-y-4">
                <h1 className="text-3xl md:text-4xl lg:text-5xl font-bold text-gray-900 leading-tight">
                  {recipe.title}
                </h1>
                <p className="text-lg md:text-xl text-gray-600 leading-relaxed">
                  {recipe.description}
                </p>
                <div className="flex flex-wrap gap-2 md:gap-3">
                  {[
                    {icon: ChefHat, text: recipe.difficulty, color: 'blue'},
                    {icon: Clock, text: `${recipe.prepTime} min Prep`, color: 'green'},
                    {icon: Clock, text: `${recipe.cookTime} min Cook`, color: 'orange'},
                  ].map((item, index) => (
                      <div
                          key={index}
                          className={`flex items-center text-${item.color}-600 bg-${item.color}-50 px-3 py-1.5 md:px-4 md:py-2 rounded-full transition-all active:scale-95 md:hover:scale-105`}
                      >
                        <item.icon className="h-4 w-4 md:h-5 md:w-5 mr-1.5"/>
                        <span className="font-semibold text-xs md:text-sm">{item.text}</span>
                      </div>
                  ))}
                </div>
              </div>

              {/* Ingredients */}
              <div className="bg-white p-4 md:p-6 rounded-xl md:rounded-2xl shadow-sm border border-gray-100">
                <h3 className="text-xl md:text-2xl font-bold text-gray-900 mb-3 md:mb-4 flex items-center">
                  <ChefHat className="h-5 w-5 md:h-6 md:w-6 mr-2 text-blue-500"/>
                  Ingredients
                  <span className="text-gray-400 text-base md:text-lg ml-2">
                  ({recipe.ingredients.length} items)
                </span>
                </h3>
                <ul className="space-y-2 md:space-y-3">
                  {recipe.ingredients.map((ingredient, index) => (
                      <li
                          key={index}
                          className="flex items-center space-x-2 md:space-x-3 p-2 md:p-3 rounded-lg active:bg-gray-50 md:hover:bg-gray-50 transition-colors"
                      >
                        <div className="w-1.5 h-1.5 md:w-2 md:h-2 bg-blue-500 rounded-full flex-shrink-0" />
                        <span className="text-gray-700 text-base md:text-lg">{ingredient}</span>
                      </li>
                  ))}
                </ul>
              </div>

              {/* Instructions */}
              <div className="bg-white p-4 md:p-6 rounded-xl md:rounded-2xl shadow-sm border border-gray-100">
                <h3 className="text-xl md:text-2xl font-bold text-gray-900 mb-3 md:mb-4 flex items-center">
                  <Bookmark className="h-5 w-5 md:h-6 md:w-6 mr-2 text-green-500" />
                  Instructions
                </h3>
                <ol className="space-y-4 md:space-y-6">
                  {recipe.steps.map((step, index) => (
                      <li
                          key={index}
                          className="flex space-x-3 md:space-x-4 group active:bg-gray-50 md:hover:bg-gray-50 p-3 md:p-4 rounded-lg md:rounded-xl transition-colors"
                      >
                        <div className="flex-shrink-0 w-8 h-8 md:w-10 md:h-10 bg-blue-100 text-blue-500 rounded-full flex items-center justify-center font-bold text-base md:text-lg transition-all group-hover:bg-blue-500 group-hover:text-white">
                          {index + 1}
                        </div>
                        <p className="text-gray-700 text-base md:text-lg leading-relaxed flex-1">
                          {step}
                        </p>
                      </li>
                  ))}
                </ol>
              </div>
            </div>
          </div>
        </main>
      </div>
  );
}

export default RecipeDetails;

========================================
File: pages\RecipeForm.jsx
========================================

// import React, { useState } from "react";
// import { useDispatch, useSelector } from "react-redux";
// import { useNavigate } from "react-router-dom";
// import {
//   Plus,
//   X,
//   Upload,
//   ChefHat,
//   Clock,
//   Image,
//   Video,
//   Trash2,
// } from "lucide-react";
// import { publishRecipe } from "../features/recipes/recipeSlice";

// const DifficultyBadge = ({ level, isSelected, onClick }) => {
//   const baseClasses =
//     "px-4 py-2 rounded-full font-medium text-sm transition-all duration-200 cursor-pointer";
//   const variants = {
//     Easy: isSelected
//       ? "bg-green-500 text-white"
//       : "bg-green-100 text-green-600 hover:bg-green-200",
//     Medium: isSelected
//       ? "bg-yellow-500 text-white"
//       : "bg-yellow-100 text-yellow-600 hover:bg-yellow-200",
//     Hard: isSelected
//       ? "bg-red-500 text-white"
//       : "bg-red-100 text-red-600 hover:bg-red-200",
//   };

//   return (
//     <div className={`${baseClasses} ${variants[level]}`} onClick={onClick}>
//       {level}
//     </div>
//   );
// };

// const categories = [
//   { value: "appetizers", label: "APPETIZERS" },
//   { value: "main-courses", label: "MAIN COURSES" },
//   { value: "side-dishes", label: "SIDE DISHES" },
//   { value: "desserts", label: "DESSERTS" },
//   { value: "soups-salads", label: "SOUPS & SALADS" },
//   { value: "beverages", label: "BEVERAGES" },
//   { value: "snacks", label: "SNACKS" },
//   { value: "vegetarian", label: "VEGETARIAN" },
// ];

// const RecipeForm = () => {
//   const dispatch = useDispatch();
//   const navigate = useNavigate();
//   const { loading, error } = useSelector((state) => state.recipes);

//   const [formData, setFormData] = useState({
//     title: "",
//     prepTime: "",
//     cookTime: "",
//     difficulty: "Easy",
//     description: "",
//     ingredients: [""],
//     instructions: [""],
//     category: "",
//     mediaType: "photo",
//     image: null,
//     video: null,
//   });

//   const handleChange = (e) => {
//     const { name, value, files } = e.target;
//     setFormData((prevData) => ({
//       ...prevData,
//       [name]: files ? files[0] : value,
//     }));
//   };

//   const handleDifficultyChange = (difficulty) => {
//     setFormData((prevData) => ({
//       ...prevData,
//       difficulty,
//     }));
//   };

//   const handleDynamicChange = (index, field, value) => {
//     const newItems = [...formData[field]];
//     newItems[index] = value;
//     setFormData((prevData) => ({
//       ...prevData,
//       [field]: newItems,
//     }));
//   };

//   const addItem = (field) => {
//     setFormData((prevData) => ({
//       ...prevData,
//       [field]: [...prevData[field], ""],
//     }));
//   };

//   const removeItem = (index, field) => {
//     if (formData[field].length > 1) {
//       setFormData((prevData) => ({
//         ...prevData,
//         [field]: prevData[field].filter((_, i) => i !== index),
//       }));
//     }
//   };

//   const handleSubmit = async (e) => {
//     e.preventDefault();

//     if (
//       !formData.title ||
//       !formData.description ||
//       !formData.category ||
//       !formData.prepTime ||
//       !formData.cookTime ||
//       !formData.difficulty ||
//       (formData.mediaType === "photo" && !formData.image) ||
//       (formData.mediaType === "video" && !formData.video) ||
//       formData.ingredients.some((ing) => !ing) ||
//       formData.instructions.some((step) => !step)
//     ) {
//       alert("Please fill in all required fields.");
//       return;
//     }

//     const formDataToSend = new FormData();
//     formDataToSend.append("title", formData.title);
//     formDataToSend.append("description", formData.description);
//     formDataToSend.append("category", formData.category);
//     formDataToSend.append(
//       "type",
//       formData.mediaType === "photo" ? "image" : "video"
//     );
//     formDataToSend.append("prepTime", formData.prepTime);
//     formDataToSend.append("cookTime", formData.cookTime);
//     formDataToSend.append("difficulty", formData.difficulty);
//     formData.instructions.forEach((step) =>
//       formDataToSend.append("steps[]", step)
//     );
//     formData.ingredients.forEach((ing) =>
//       formDataToSend.append("ingredients[]", ing)
//     );

//     if (formData.mediaType === "photo") {
//       formDataToSend.append("mediaFile", formData.image);
//     } else {
//       formDataToSend.append("mediaFile", formData.video);
//     }

//     try {
//       const result = await dispatch(publishRecipe(formDataToSend));
//       if (!result.error) {
//         navigate("/");
//       }
//     } catch (error) {
//       console.error("Submission failed:", error);
//     }
//   };

//   return (
//     <div className="min-h-screen bg-gradient-to-r from-orange-100 to-yellow-100 py-12 px-4">
//       <div className="max-w-4xl mx-auto bg-white rounded-xl shadow-xl overflow-hidden">
//         <div className="p-6 md:p-8">
//           <div className="flex justify-between items-center border-b pb-4 mb-6">
//             <div className="flex items-center space-x-3">
//               <ChefHat className="h-8 w-8 text-orange-500" />
//               <h1 className="text-2xl font-bold text-gray-800">
//                 Create New Recipe
//               </h1>
//             </div>
//             <button
//               onClick={() => navigate("/")}
//               className="p-2 bg-red-100 text-red-600 rounded-lg hover:bg-red-200 transition-colors"
//             >
//               <X className="h-5 w-5" />
//             </button>
//           </div>

//           <div className="flex gap-4 mb-6">
//             <button
//               type="button"
//               onClick={() =>
//                 setFormData((prev) => ({ ...prev, mediaType: "photo" }))
//               }
//               className={`flex items-center gap-2 px-4 py-2 rounded-lg transition-colors ${
//                 formData.mediaType === "photo"
//                   ? "bg-orange-500 text-white"
//                   : "bg-gray-100 text-gray-600 hover:bg-gray-200"
//               }`}
//             >
//               <Image className="h-5 w-5" />
//               <span>Photo Recipe</span>
//             </button>
//             <button
//               type="button"
//               onClick={() =>
//                 setFormData((prev) => ({ ...prev, mediaType: "video" }))
//               }
//               className={`flex items-center gap-2 px-4 py-2 rounded-lg transition-colors ${
//                 formData.mediaType === "video"
//                   ? "bg-orange-500 text-white"
//                   : "bg-gray-100 text-gray-600 hover:bg-gray-200"
//               }`}
//             >
//               <Video className="h-5 w-5" />
//               <span>Video Recipe</span>
//             </button>
//           </div>

//           <form onSubmit={handleSubmit} className="space-y-6">
//             <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
//               <div className="space-y-4">
//                 <div>
//                   <label className="block text-sm font-medium text-gray-700 mb-1">
//                     Recipe Name
//                   </label>
//                   <input
//                     type="text"
//                     name="title"
//                     placeholder="e.g., Homemade Margherita Pizza"
//                     value={formData.title}
//                     onChange={handleChange}
//                     className="w-full px-4 py-3 rounded-lg border border-gray-300 focus:ring-2 focus:ring-orange-500 focus:border-orange-500 transition-colors"
//                     required
//                   />
//                 </div>

//                 <div>
//                   <label className="block text-sm font-medium text-gray-700 mb-1">
//                     Category
//                   </label>
//                   <select
//                     name="category"
//                     value={formData.category}
//                     onChange={handleChange}
//                     className="w-full px-4 py-3 rounded-lg border border-gray-300 focus:ring-2 focus:ring-orange-500 focus:border-orange-500 transition-colors"
//                     required
//                   >
//                     <option value="">Select Category</option>
//                     {categories.map((category) => (
//                       <option key={category.value} value={category.value}>
//                         {category.label}
//                       </option>
//                     ))}
//                   </select>
//                 </div>

//                 <div className="grid grid-cols-2 gap-4">
//                   <div>
//                     <label className="block text-sm font-medium text-gray-700 mb-1">
//                       Prep Time (mins)
//                     </label>
//                     <div className="relative">
//                       <Clock className="absolute left-3 top-1/2 transform -translate-y-1/2 h-5 w-5 text-gray-400" />
//                       <input
//                         type="number"
//                         name="prepTime"
//                         placeholder="15"
//                         value={formData.prepTime}
//                         onChange={handleChange}
//                         className="w-full pl-10 pr-4 py-3 rounded-lg border border-gray-300 focus:ring-2 focus:ring-orange-500 focus:border-orange-500"
//                         required
//                       />
//                     </div>
//                   </div>
//                   <div>
//                     <label className="block text-sm font-medium text-gray-700 mb-1">
//                       Cook Time (mins)
//                     </label>
//                     <div className="relative">
//                       <Clock className="absolute left-3 top-1/2 transform -translate-y-1/2 h-5 w-5 text-gray-400" />
//                       <input
//                         type="number"
//                         name="cookTime"
//                         placeholder="30"
//                         value={formData.cookTime}
//                         onChange={handleChange}
//                         className="w-full pl-10 pr-4 py-3 rounded-lg border border-gray-300 focus:ring-2 focus:ring-orange-500 focus:border-orange-500"
//                         required
//                       />
//                     </div>
//                   </div>
//                 </div>

//                 <div>
//                   <label className="block text-sm font-medium text-gray-700 mb-2">
//                     Difficulty Level
//                   </label>
//                   <div className="flex gap-4">
//                     {["Easy", "Medium", "Hard"].map((level) => (
//                       <DifficultyBadge
//                         key={level}
//                         level={level}
//                         isSelected={formData.difficulty === level}
//                         onClick={() => handleDifficultyChange(level)}
//                       />
//                     ))}
//                   </div>
//                 </div>

//                 <div>
//                   <label className="block text-sm font-medium text-gray-700 mb-1">
//                     {formData.mediaType === "photo"
//                       ? "Recipe Image"
//                       : "Recipe Video"}
//                   </label>
//                   <div className="relative">
//                     <input
//                       type="file"
//                       name={formData.mediaType === "photo" ? "image" : "video"}
//                       accept={
//                         formData.mediaType === "photo" ? "image/*" : "video/*"
//                       }
//                       onChange={handleChange}
//                       className="w-full px-4 py-3 rounded-lg border border-gray-300 focus:ring-2 focus:ring-orange-500 focus:border-orange-500"
//                     />
//                     <Upload className="absolute right-3 top-1/2 transform -translate-y-1/2 h-5 w-5 text-gray-400 pointer-events-none" />
//                   </div>
//                   {formData.mediaType === "photo" && formData.image && (
//                     <p className="mt-1 text-sm text-gray-500">
//                       Selected: {formData.image.name}
//                     </p>
//                   )}
//                   {formData.mediaType === "video" && formData.video && (
//                     <p className="mt-1 text-sm text-gray-500">
//                       Selected: {formData.video.name}
//                     </p>
//                   )}
//                 </div>
//               </div>

//               <div className="space-y-4">
//                 <div>
//                   <label className="block text-sm font-medium text-gray-700 mb-1">
//                     Recipe Description
//                   </label>
//                   <textarea
//                     name="description"
//                     placeholder="Tell us about your recipe..."
//                     value={formData.description}
//                     onChange={handleChange}
//                     className="w-full px-4 py-3 rounded-lg border border-gray-300 focus:ring-2 focus:ring-orange-500 focus:border-orange-500 min-h-[120px]"
//                     required
//                   />
//                 </div>

//                 <div>
//                   <label className="block text-sm font-medium text-gray-700 mb-2">
//                     Ingredients
//                   </label>
//                   <div className="space-y-2">
//                     {formData.ingredients.map((ingredient, index) => (
//                       <div key={index} className="flex gap-2">
//                         <input
//                           type="text"
//                           placeholder={`e.g., 2 cups of flour`}
//                           value={ingredient}
//                           onChange={(e) =>
//                             handleDynamicChange(
//                               index,
//                               "ingredients",
//                               e.target.value
//                             )
//                           }
//                           className="flex-1 px-4 py-2 rounded-lg border border-gray-300 focus:ring-2 focus:ring-orange-500 focus:border-orange-500"
//                           required
//                         />
//                         <button
//                           type="button"
//                           onClick={() => removeItem(index, "ingredients")}
//                           className="p-2 bg-red-100 text-red-600 rounded-lg hover:bg-red-200 transition-colors"
//                           disabled={formData.ingredients.length === 1}
//                         >
//                           <Trash2 className="h-5 w-5" />
//                         </button>
//                       </div>
//                     ))}
//                     <button
//                       type="button"
//                       onClick={() => addItem("ingredients")}
//                       className="w-full py-2 bg-gray-100 text-gray-600 rounded-lg hover:bg-gray-200 transition-colors flex items-center justify-center gap-2"
//                     >
//                       <Plus className="h-5 w-5" />
//                       <span>Add Ingredient</span>
//                     </button>
//                   </div>
//                 </div>
//               </div>
//             </div>

//             <div>
//               <label className="block text-sm font-medium text-gray-700 mb-2">
//                 Instructions
//               </label>
//               <div className="space-y-2">
//                 {formData.instructions.map((instruction, index) => (
//                   <div key={index} className="flex gap-2">
//                     <textarea
//                       placeholder={`Step ${index + 1}: Mix the ingredients...`}
//                       value={instruction}
//                       onChange={(e) =>
//                         handleDynamicChange(
//                           index,
//                           "instructions",
//                           e.target.value
//                         )
//                       }
//                       className="flex-1 px-4 py-2 rounded-lg border border-gray-300 focus:ring-2 focus:ring-orange-500 focus:border-orange-500 min-h-[80px]"
//                       required
//                     />
//                     <button
//                       type="button"
//                       onClick={() => removeItem(index, "instructions")}
//                       className="p-2 bg-red-100 text-red-600 rounded-lg hover:bg-red-200 transition-colors self-start"
//                       disabled={formData.instructions.length === 1}
//                     >
//                       <Trash2 className="h-5 w-5" />
//                     </button>
//                   </div>
//                 ))}
//                 <button
//                   type="button"
//                   onClick={() => addItem("instructions")}
//                   className="w-full py-2 bg-gray-100 text-gray-600 rounded-lg hover:bg-gray-200 transition-colors flex items-center justify-center gap-2"
//                 >
//                   <Plus className="h-5 w-5" />
//                   <span>Add Instruction</span>
//                 </button>
//               </div>
//             </div>

//             {error && (
//               <div className="text-red-500 text-center mt-4">{error}</div>
//             )}

//             <div className="flex justify-end gap-4 pt-4 border-t">
//               <button
//                 type="button"
//                 onClick={() => navigate("/")}
//                 className="px-6 py-2 bg-gray-100 text-gray-700 rounded-lg hover:bg-gray-200 transition-colors"
//               >
//                 Cancel
//               </button>
//               <button
//                 type="submit"
//                 disabled={loading}
//                 className="px-6 py-2 bg-orange-500 text-white rounded-lg hover:bg-orange-600 transition-colors disabled:bg-orange-300 flex items-center gap-2"
//               >
//                 {loading ? (
//                   "Publishing..."
//                 ) : (
//                   <>
//                     <ChefHat className="h-5 w-5" />
//                     <span>Publish Recipe</span>
//                   </>
//                 )}
//               </button>
//             </div>
//           </form>
//         </div>
//       </div>
//     </div>
//   );
// };

// export default RecipeForm;

// import React, { useState } from "react";
// import { useDispatch, useSelector } from "react-redux";
// import { useNavigate } from "react-router-dom";
// import {
//   Plus,
//   X,
//   Upload,
//   ChefHat,
//   Clock,
//   Image,
//   Video,
//   Trash2,
// } from "lucide-react";
// import { publishRecipe } from "../features/recipes/recipeSlice";

// const DifficultyBadge = ({ level, isSelected, onClick }) => {
//   const baseClasses =
//     "px-4 py-2 rounded-full font-medium text-sm transition-all duration-200 cursor-pointer";
//   const variants = {
//     Easy: isSelected
//       ? "bg-green-500 text-white"
//       : "bg-green-100 text-green-600 hover:bg-green-200",
//     Medium: isSelected
//       ? "bg-yellow-500 text-white"
//       : "bg-yellow-100 text-yellow-600 hover:bg-yellow-200",
//     Hard: isSelected
//       ? "bg-red-500 text-white"
//       : "bg-red-100 text-red-600 hover:bg-red-200",
//   };

//   return (
//     <div className={`${baseClasses} ${variants[level]}`} onClick={onClick}>
//       {level}
//     </div>
//   );
// };

// const categories = [
//   { value: "appetizers", label: "APPETIZERS" },
//   { value: "main-courses", label: "MAIN COURSES" },
//   { value: "side-dishes", label: "SIDE DISHES" },
//   { value: "desserts", label: "DESSERTS" },
//   { value: "soups-salads", label: "SOUPS & SALADS" },
//   { value: "beverages", label: "BEVERAGES" },
//   { value: "snacks", label: "SNACKS" },
//   { value: "vegetarian", label: "VEGETARIAN" },
// ];

// const RecipeForm = () => {
//   const dispatch = useDispatch();
//   const navigate = useNavigate();
//   const { loading, error } = useSelector((state) => state.recipes);

//   const [formData, setFormData] = useState({
//     title: "",
//     prepTime: "",
//     cookTime: "",
//     difficulty: "Easy",
//     description: "",
//     ingredients: [""],
//     instructions: [""],
//     category: "",
//     mediaType: "photo",
//     image: null,
//     video: null,
//   });

//   const handleChange = (e) => {
//     const { name, value, files } = e.target;
//     setFormData((prevData) => ({
//       ...prevData,
//       [name]: files ? files[0] : value,
//     }));
//   };

//   const handleDifficultyChange = (difficulty) => {
//     setFormData((prevData) => ({
//       ...prevData,
//       difficulty,
//     }));
//   };

//   const handleDynamicChange = (index, field, value) => {
//     const newItems = [...formData[field]];
//     newItems[index] = value;
//     setFormData((prevData) => ({
//       ...prevData,
//       [field]: newItems,
//     }));
//   };

//   const addItem = (field) => {
//     setFormData((prevData) => ({
//       ...prevData,
//       [field]: [...prevData[field], ""],
//     }));
//   };

//   const removeItem = (index, field) => {
//     if (formData[field].length > 1) {
//       setFormData((prevData) => ({
//         ...prevData,
//         [field]: prevData[field].filter((_, i) => i !== index),
//       }));
//     }
//   };

//   const handleSubmit = async (e) => {
//     e.preventDefault();

//     if (
//       !formData.title ||
//       !formData.description ||
//       !formData.category ||
//       !formData.prepTime ||
//       !formData.cookTime ||
//       !formData.difficulty ||
//       (formData.mediaType === "photo" && !formData.image) ||
//       (formData.mediaType === "video" && !formData.video) ||
//       formData.ingredients.some((ing) => !ing) ||
//       formData.instructions.some((step) => !step)
//     ) {
//       alert("Please fill in all required fields.");
//       return;
//     }

//     try {
//       const formDataToSend = new FormData();
//       formDataToSend.append("title", formData.title);
//       formDataToSend.append("description", formData.description);
//       formDataToSend.append("category", formData.category);
//       formDataToSend.append(
//         "type",
//         formData.mediaType === "photo" ? "image" : "video"
//       );
//       formDataToSend.append("prepTime", formData.prepTime);
//       formDataToSend.append("cookTime", formData.cookTime);
//       formDataToSend.append("difficulty", formData.difficulty);

//       formData.instructions.forEach((step) =>
//         formDataToSend.append("steps[]", step)
//       );

//       formData.ingredients.forEach((ing) =>
//         formDataToSend.append("ingredients[]", ing)
//       );

//       if (formData.mediaType === "photo") {
//         formDataToSend.append("mediaFile", formData.image);
//       } else {
//         formDataToSend.append("mediaFile", formData.video);
//       }

//       await dispatch(publishRecipe(formDataToSend)).unwrap();
//       navigate("/");
//     } catch (err) {
//       console.error("Submission failed:", err);
//     }
//   };

//   return (
//     <div className="min-h-screen bg-gradient-to-r from-orange-100 to-yellow-100 py-12 px-4">
//       <div className="max-w-4xl mx-auto bg-white rounded-xl shadow-xl overflow-hidden">
//         <div className="p-6 md:p-8">
//           <div className="flex justify-between items-center border-b pb-4 mb-6">
//             <div className="flex items-center space-x-3">
//               <ChefHat className="h-8 w-8 text-orange-500" />
//               <h1 className="text-2xl font-bold text-gray-800">
//                 Create New Recipe
//               </h1>
//             </div>
//             <button
//               onClick={() => navigate("/")}
//               className="p-2 bg-red-100 text-red-600 rounded-lg hover:bg-red-200 transition-colors"
//             >
//               <X className="h-5 w-5" />
//             </button>
//           </div>

//           <div className="flex gap-4 mb-6">
//             <button
//               type="button"
//               onClick={() =>
//                 setFormData((prev) => ({ ...prev, mediaType: "photo" }))
//               }
//               className={`flex items-center gap-2 px-4 py-2 rounded-lg transition-colors ${
//                 formData.mediaType === "photo"
//                   ? "bg-orange-500 text-white"
//                   : "bg-gray-100 text-gray-600 hover:bg-gray-200"
//               }`}
//             >
//               <Image className="h-5 w-5" />
//               <span>Photo Recipe</span>
//             </button>
//             <button
//               type="button"
//               onClick={() =>
//                 setFormData((prev) => ({ ...prev, mediaType: "video" }))
//               }
//               className={`flex items-center gap-2 px-4 py-2 rounded-lg transition-colors ${
//                 formData.mediaType === "video"
//                   ? "bg-orange-500 text-white"
//                   : "bg-gray-100 text-gray-600 hover:bg-gray-200"
//               }`}
//             >
//               <Video className="h-5 w-5" />
//               <span>Video Recipe</span>
//             </button>
//           </div>

//           <form onSubmit={handleSubmit} className="space-y-6">
//             <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
//               <div className="space-y-4">
//                 <div>
//                   <label className="block text-sm font-medium text-gray-700 mb-1">
//                     Recipe Name
//                   </label>
//                   <input
//                     type="text"
//                     name="title"
//                     placeholder="e.g., Homemade Margherita Pizza"
//                     value={formData.title}
//                     onChange={handleChange}
//                     className="w-full px-4 py-3 rounded-lg border border-gray-300 focus:ring-2 focus:ring-orange-500 focus:border-orange-500 transition-colors"
//                     required
//                   />
//                 </div>

//                 <div>
//                   <label className="block text-sm font-medium text-gray-700 mb-1">
//                     Category
//                   </label>
//                   <select
//                     name="category"
//                     value={formData.category}
//                     onChange={handleChange}
//                     className="w-full px-4 py-3 rounded-lg border border-gray-300 focus:ring-2 focus:ring-orange-500 focus:border-orange-500 transition-colors"
//                     required
//                   >
//                     <option value="">Select Category</option>
//                     {categories.map((category) => (
//                       <option key={category.value} value={category.value}>
//                         {category.label}
//                       </option>
//                     ))}
//                   </select>
//                 </div>

//                 <div className="grid grid-cols-2 gap-4">
//                   <div>
//                     <label className="block text-sm font-medium text-gray-700 mb-1">
//                       Prep Time (mins)
//                     </label>
//                     <div className="relative">
//                       <Clock className="absolute left-3 top-1/2 transform -translate-y-1/2 h-5 w-5 text-gray-400" />
//                       <input
//                         type="number"
//                         name="prepTime"
//                         placeholder="15"
//                         value={formData.prepTime}
//                         onChange={handleChange}
//                         className="w-full pl-10 pr-4 py-3 rounded-lg border border-gray-300 focus:ring-2 focus:ring-orange-500 focus:border-orange-500"
//                         required
//                       />
//                     </div>
//                   </div>
//                   <div>
//                     <label className="block text-sm font-medium text-gray-700 mb-1">
//                       Cook Time (mins)
//                     </label>
//                     <div className="relative">
//                       <Clock className="absolute left-3 top-1/2 transform -translate-y-1/2 h-5 w-5 text-gray-400" />
//                       <input
//                         type="number"
//                         name="cookTime"
//                         placeholder="30"
//                         value={formData.cookTime}
//                         onChange={handleChange}
//                         className="w-full pl-10 pr-4 py-3 rounded-lg border border-gray-300 focus:ring-2 focus:ring-orange-500 focus:border-orange-500"
//                         required
//                       />
//                     </div>
//                   </div>
//                 </div>

//                 <div>
//                   <label className="block text-sm font-medium text-gray-700 mb-2">
//                     Difficulty Level
//                   </label>
//                   <div className="flex gap-4">
//                     {["Easy", "Medium", "Hard"].map((level) => (
//                       <DifficultyBadge
//                         key={level}
//                         level={level}
//                         isSelected={formData.difficulty === level}
//                         onClick={() => handleDifficultyChange(level)}
//                       />
//                     ))}
//                   </div>
//                 </div>

//                 <div>
//                   <label className="block text-sm font-medium text-gray-700 mb-1">
//                     {formData.mediaType === "photo"
//                       ? "Recipe Image"
//                       : "Recipe Video"}
//                   </label>
//                   <div className="relative">
//                     <input
//                       type="file"
//                       name={formData.mediaType === "photo" ? "image" : "video"}
//                       accept={
//                         formData.mediaType === "photo" ? "image/*" : "video/*"
//                       }
//                       onChange={handleChange}
//                       className="w-full px-4 py-3 rounded-lg border border-gray-300 focus:ring-2 focus:ring-orange-500 focus:border-orange-500"
//                       required
//                     />
//                     <Upload className="absolute right-3 top-1/2 transform -translate-y-1/2 h-5 w-5 text-gray-400 pointer-events-none" />
//                   </div>
//                   {formData.mediaType === "photo" && formData.image && (
//                     <p className="mt-1 text-sm text-gray-500">
//                       Selected: {formData.image.name}
//                     </p>
//                   )}
//                   {formData.mediaType === "video" && formData.video && (
//                     <p className="mt-1 text-sm text-gray-500">
//                       Selected: {formData.video.name}
//                     </p>
//                   )}
//                 </div>
//               </div>

//               <div className="space-y-4">
//                 <div>
//                   <label className="block text-sm font-medium text-gray-700 mb-1">
//                     Recipe Description
//                   </label>
//                   <textarea
//                     name="description"
//                     placeholder="Tell us about your recipe..."
//                     value={formData.description}
//                     onChange={handleChange}
//                     className="w-full px-4 py-3 rounded-lg border border-gray-300 focus:ring-2 focus:ring-orange-500 focus:border-orange-500 min-h-[120px]"
//                     required
//                   />
//                 </div>

//                 <div>
//                   <label className="block text-sm font-medium text-gray-700 mb-2">
//                     Ingredients
//                   </label>
//                   <div className="space-y-2">
//                     {formData.ingredients.map((ingredient, index) => (
//                       <div key={index} className="flex gap-2">
//                         <input
//                           type="text"
//                           placeholder={`e.g., 2 cups of flour`}
//                           value={ingredient}
//                           onChange={(e) =>
//                             handleDynamicChange(
//                               index,
//                               "ingredients",
//                               e.target.value
//                             )
//                           }
//                           className="flex-1 px-4 py-2 rounded-lg border border-gray-300 focus:ring-2 focus:ring-orange-500 focus:border-orange-500"
//                           required
//                         />
//                         <button
//                           type="button"
//                           onClick={() => removeItem(index, "ingredients")}
//                           className="p-2 bg-red-100 text-red-600 rounded-lg hover:bg-red-200 transition-colors"
//                           disabled={formData.ingredients.length === 1}
//                         >
//                           <Trash2 className="h-5 w-5" />
//                         </button>
//                       </div>
//                     ))}
//                     <button
//                       type="button"
//                       onClick={() => addItem("ingredients")}
//                       className="w-full py-2 bg-gray-100 text-gray-600 rounded-lg hover:bg-gray-200 transition-colors flex items-center justify-center gap-2"
//                     >
//                       <Plus className="h-5 w-5" />
//                       <span>Add Ingredient</span>
//                     </button>
//                   </div>
//                 </div>
//               </div>
//             </div>

//             <div>
//               <label className="block text-sm font-medium text-gray-700 mb-2">
//                 Instructions
//               </label>
//               <div className="space-y-2">
//                 {formData.instructions.map((instruction, index) => (
//                   <div key={index} className="flex gap-2">
//                     <textarea
//                       placeholder={`Step ${index + 1}: Mix the ingredients...`}
//                       value={instruction}
//                       onChange={(e) =>
//                         handleDynamicChange(
//                           index,
//                           "instructions",
//                           e.target.value
//                         )
//                       }
//                       className="flex-1 px-4 py-2 rounded-lg border border-gray-300 focus:ring-2 focus:ring-orange-500 focus:border-orange-500 min-h-[80px]"
//                       required
//                     />
//                     <button
//                       type="button"
//                       onClick={() => removeItem(index, "instructions")}
//                       className="p-2 bg-red-100 text-red-600 rounded-lg hover:bg-red-200 transition-colors self-start"
//                       disabled={formData.instructions.length === 1}
//                     >
//                       <Trash2 className="h-5 w-5" />
//                     </button>
//                   </div>
//                 ))}
//                 <button
//                   type="button"
//                   onClick={() => addItem("instructions")}
//                   className="w-full py-2 bg-gray-100 text-gray-600 rounded-lg hover:bg-gray-200 transition-colors flex items-center justify-center gap-2"
//                 >
//                   <Plus className="h-5 w-5" />
//                   <span>Add Instruction</span>
//                 </button>
//               </div>
//             </div>

//             {error && (
//               <div className="text-red-500 text-center mt-4">{error}</div>
//             )}

//             <div className="flex justify-end gap-4 pt-4 border-t">
//               <button
//                 type="button"
//                 onClick={() => navigate("/")}
//                 className="px-6 py-2 bg-gray-100 text-gray-700 rounded-lg hover:bg-gray-200 transition-colors"
//               >
//                 Cancel
//               </button>
//               <button
//                 type="submit"
//                 disabled={loading}
//                 className="px-6 py-2 bg-orange-500 text-white rounded-lg hover:bg-orange-600 transition-colors disabled:bg-orange-300 flex items-center gap-2"
//               >
//                 {loading ? (
//                   "Publishing..."
//                 ) : (
//                   <>
//                     <ChefHat className="h-5 w-5" />
//                     <span>Publish Recipe</span>
//                   </>
//                 )}
//               </button>
//             </div>
//           </form>
//         </div>
//       </div>
//     </div>
//   );
// };

// export default RecipeForm;

import React, { useState } from "react";
import { useDispatch, useSelector } from "react-redux";
import { useNavigate } from "react-router-dom";
import {
  Plus,
  X,
  Upload,
  ChefHat,
  Clock,
  Image,
  Video,
  Trash2,
} from "lucide-react";
import { publishRecipe } from "../features/recipes/recipeSlice";

const DifficultyBadge = ({ level, isSelected, onClick }) => {
  const baseClasses =
    "px-4 py-2 rounded-full font-medium text-sm transition-all duration-200 cursor-pointer";
  const variants = {
    Easy: isSelected
      ? "bg-green-500 text-white"
      : "bg-green-100 text-green-600 hover:bg-green-200",
    Medium: isSelected
      ? "bg-yellow-500 text-white"
      : "bg-yellow-100 text-yellow-600 hover:bg-yellow-200",
    Hard: isSelected
      ? "bg-red-500 text-white"
      : "bg-red-100 text-red-600 hover:bg-red-200",
  };

  return (
    <div className={`${baseClasses} ${variants[level]}`} onClick={onClick}>
      {level}
    </div>
  );
};

const categories = [
  { value: "appetizers", label: "APPETIZERS" },
  { value: "main-courses", label: "MAIN COURSES" },
  { value: "side-dishes", label: "SIDE DISHES" },
  { value: "desserts", label: "DESSERTS" },
  { value: "soups-salads", label: "SOUPS & SALADS" },
  { value: "beverages", label: "BEVERAGES" },
  { value: "snacks", label: "SNACKS" },
  { value: "vegetarian", label: "VEGETARIAN" },
];

const RecipeForm = () => {
  const dispatch = useDispatch();
  const navigate = useNavigate();
  const { loading, error } = useSelector((state) => state.recipes);

  const [formData, setFormData] = useState({
    title: "",
    prepTime: "",
    cookTime: "",
    difficulty: "Easy",
    description: "",
    ingredients: [""],
    instructions: [""],
    category: "",
    mediaType: "photo",
    image: null,
    video: null,
  });

  const handleChange = (e) => {
    const { name, value, files } = e.target;
    setFormData((prevData) => ({
      ...prevData,
      [name]: files ? files[0] : value,
    }));
  };

  const handleDifficultyChange = (difficulty) => {
    setFormData((prevData) => ({
      ...prevData,
      difficulty,
    }));
  };

  const handleDynamicChange = (index, field, value) => {
    const newItems = [...formData[field]];
    newItems[index] = value;
    setFormData((prevData) => ({
      ...prevData,
      [field]: newItems,
    }));
  };

  const addItem = (field) => {
    setFormData((prevData) => ({
      ...prevData,
      [field]: [...prevData[field], ""],
    }));
  };

  const removeItem = (index, field) => {
    if (formData[field].length > 1) {
      setFormData((prevData) => ({
        ...prevData,
        [field]: prevData[field].filter((_, i) => i !== index),
      }));
    }
  };

  const handleSubmit = async (e) => {
    e.preventDefault();

    // Form validation
    if (
      !formData.title ||
      !formData.description ||
      !formData.category ||
      !formData.prepTime ||
      !formData.cookTime ||
      !formData.difficulty ||
      (formData.mediaType === "photo" && !formData.image) ||
      (formData.mediaType === "video" && !formData.video) ||
      formData.ingredients.some((ing) => !ing) ||
      formData.instructions.some((step) => !step)
    ) {
      alert("Please fill in all required fields.");
      return;
    }

    try {
      // Create FormData object from the form
      const formDataToSend = new FormData();

      // Add basic fields
      formDataToSend.append("title", formData.title);
      formDataToSend.append("description", formData.description);
      formDataToSend.append("category", formData.category);
      formDataToSend.append("prepTime", formData.prepTime);
      formDataToSend.append("cookTime", formData.cookTime);
      formDataToSend.append("difficulty", formData.difficulty);
      formDataToSend.append("mediaType", formData.mediaType);

      // Add the correct media file based on selected type
      if (formData.mediaType === "photo") {
        formDataToSend.append("mediaFile", formData.image);
      } else {
        formDataToSend.append("mediaFile", formData.video);
      }

      // Add arrays
      formData.instructions.forEach((instruction, index) => {
        formDataToSend.append("steps", instruction);
      });

      formData.ingredients.forEach((ingredient, index) => {
        formDataToSend.append("ingredients", ingredient);
      });

      // Dispatch action and navigate on success
      await dispatch(publishRecipe(formDataToSend)).unwrap();
      navigate("/");
    } catch (err) {
      console.error("Submission failed:", err);
    }
  };

  return (
    <div className="min-h-screen bg-gradient-to-r from-orange-100 to-yellow-100 py-12 px-4">
      <div className="max-w-4xl mx-auto bg-white rounded-xl shadow-xl overflow-hidden">
        <div className="p-6 md:p-8">
          <div className="flex justify-between items-center border-b pb-4 mb-6">
            <div className="flex items-center space-x-3">
              <ChefHat className="h-8 w-8 text-orange-500" />
              <h1 className="text-2xl font-bold text-gray-800">
                Create New Recipe
              </h1>
            </div>
            <button
              onClick={() => navigate("/")}
              className="p-2 bg-red-100 text-red-600 rounded-lg hover:bg-red-200 transition-colors"
            >
              <X className="h-5 w-5" />
            </button>
          </div>

          <div className="flex gap-4 mb-6">
            <button
              type="button"
              onClick={() =>
                setFormData((prev) => ({ ...prev, mediaType: "photo" }))
              }
              className={`flex items-center gap-2 px-4 py-2 rounded-lg transition-colors ${
                formData.mediaType === "photo"
                  ? "bg-orange-500 text-white"
                  : "bg-gray-100 text-gray-600 hover:bg-gray-200"
              }`}
            >
              <Image className="h-5 w-5" />
              <span>Photo Recipe</span>
            </button>
            <button
              type="button"
              onClick={() =>
                setFormData((prev) => ({ ...prev, mediaType: "video" }))
              }
              className={`flex items-center gap-2 px-4 py-2 rounded-lg transition-colors ${
                formData.mediaType === "video"
                  ? "bg-orange-500 text-white"
                  : "bg-gray-100 text-gray-600 hover:bg-gray-200"
              }`}
            >
              <Video className="h-5 w-5" />
              <span>Video Recipe</span>
            </button>
          </div>

          <form
            onSubmit={handleSubmit}
            className="space-y-6"
            encType="multipart/form-data"
          >
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <div className="space-y-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    Recipe Name
                  </label>
                  <input
                    type="text"
                    name="title"
                    placeholder="e.g., Homemade Margherita Pizza"
                    value={formData.title}
                    onChange={handleChange}
                    className="w-full px-4 py-3 rounded-lg border border-gray-300 focus:ring-2 focus:ring-orange-500 focus:border-orange-500 transition-colors"
                    required
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    Category
                  </label>
                  <select
                    name="category"
                    value={formData.category}
                    onChange={handleChange}
                    className="w-full px-4 py-3 rounded-lg border border-gray-300 focus:ring-2 focus:ring-orange-500 focus:border-orange-500 transition-colors"
                    required
                  >
                    <option value="">Select Category</option>
                    {categories.map((category) => (
                      <option key={category.value} value={category.value}>
                        {category.label}
                      </option>
                    ))}
                  </select>
                </div>

                <div className="grid grid-cols-2 gap-4">
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      Prep Time (mins)
                    </label>
                    <div className="relative">
                      <Clock className="absolute left-3 top-1/2 transform -translate-y-1/2 h-5 w-5 text-gray-400" />
                      <input
                        type="number"
                        name="prepTime"
                        placeholder="15"
                        value={formData.prepTime}
                        onChange={handleChange}
                        className="w-full pl-10 pr-4 py-3 rounded-lg border border-gray-300 focus:ring-2 focus:ring-orange-500 focus:border-orange-500"
                        required
                      />
                    </div>
                  </div>
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      Cook Time (mins)
                    </label>
                    <div className="relative">
                      <Clock className="absolute left-3 top-1/2 transform -translate-y-1/2 h-5 w-5 text-gray-400" />
                      <input
                        type="number"
                        name="cookTime"
                        placeholder="30"
                        value={formData.cookTime}
                        onChange={handleChange}
                        className="w-full pl-10 pr-4 py-3 rounded-lg border border-gray-300 focus:ring-2 focus:ring-orange-500 focus:border-orange-500"
                        required
                      />
                    </div>
                  </div>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Difficulty Level
                  </label>
                  <div className="flex gap-4">
                    {["Easy", "Medium", "Hard"].map((level) => (
                      <DifficultyBadge
                        key={level}
                        level={level}
                        isSelected={formData.difficulty === level}
                        onClick={() => handleDifficultyChange(level)}
                      />
                    ))}
                  </div>
                  <input
                    type="hidden"
                    name="difficulty"
                    value={formData.difficulty}
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    {formData.mediaType === "photo"
                      ? "Recipe Image"
                      : "Recipe Video"}
                  </label>
                  <div className="relative">
                    <input
                      type="file"
                      name="mediaFile"
                      accept={
                        formData.mediaType === "photo" ? "image/*" : "video/*"
                      }
                      onChange={(e) => {
                        if (formData.mediaType === "photo") {
                          handleChange({
                            target: {
                              name: "image",
                              files: e.target.files,
                            },
                          });
                        } else {
                          handleChange({
                            target: {
                              name: "video",
                              files: e.target.files,
                            },
                          });
                        }
                      }}
                      className="w-full px-4 py-3 rounded-lg border border-gray-300 focus:ring-2 focus:ring-orange-500 focus:border-orange-500"
                      required
                    />
                    <Upload className="absolute right-3 top-1/2 transform -translate-y-1/2 h-5 w-5 text-gray-400 pointer-events-none" />
                  </div>
                  {formData.mediaType === "photo" && formData.image && (
                    <p className="mt-1 text-sm text-gray-500">
                      Selected: {formData.image.name}
                    </p>
                  )}
                  {formData.mediaType === "video" && formData.video && (
                    <p className="mt-1 text-sm text-gray-500">
                      Selected: {formData.video.name}
                    </p>
                  )}
                </div>
              </div>

              <div className="space-y-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    Recipe Description
                  </label>
                  <textarea
                    name="description"
                    placeholder="Tell us about your recipe..."
                    value={formData.description}
                    onChange={handleChange}
                    className="w-full px-4 py-3 rounded-lg border border-gray-300 focus:ring-2 focus:ring-orange-500 focus:border-orange-500 min-h-[120px]"
                    required
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Ingredients
                  </label>
                  <div className="space-y-2">
                    {formData.ingredients.map((ingredient, index) => (
                      <div key={index} className="flex gap-2">
                        <input
                          type="text"
                          name="ingredients"
                          placeholder={`e.g., 2 cups of flour`}
                          value={ingredient}
                          onChange={(e) =>
                            handleDynamicChange(
                              index,
                              "ingredients",
                              e.target.value
                            )
                          }
                          className="flex-1 px-4 py-2 rounded-lg border border-gray-300 focus:ring-2 focus:ring-orange-500 focus:border-orange-500"
                          required
                        />
                        <button
                          type="button"
                          onClick={() => removeItem(index, "ingredients")}
                          className="p-2 bg-red-100 text-red-600 rounded-lg hover:bg-red-200 transition-colors"
                          disabled={formData.ingredients.length === 1}
                        >
                          <Trash2 className="h-5 w-5" />
                        </button>
                      </div>
                    ))}
                    <button
                      type="button"
                      onClick={() => addItem("ingredients")}
                      className="w-full py-2 bg-gray-100 text-gray-600 rounded-lg hover:bg-gray-200 transition-colors flex items-center justify-center gap-2"
                    >
                      <Plus className="h-5 w-5" />
                      <span>Add Ingredient</span>
                    </button>
                  </div>
                </div>
              </div>
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Instructions
              </label>
              <div className="space-y-2">
                {formData.instructions.map((instruction, index) => (
                  <div key={index} className="flex gap-2">
                    <textarea
                      name="steps"
                      placeholder={`Step ${index + 1}: Mix the ingredients...`}
                      value={instruction}
                      onChange={(e) =>
                        handleDynamicChange(
                          index,
                          "instructions",
                          e.target.value
                        )
                      }
                      className="flex-1 px-4 py-2 rounded-lg border border-gray-300 focus:ring-2 focus:ring-orange-500 focus:border-orange-500 min-h-[80px]"
                      required
                    />
                    <button
                      type="button"
                      onClick={() => removeItem(index, "instructions")}
                      className="p-2 bg-red-100 text-red-600 rounded-lg hover:bg-red-200 transition-colors self-start"
                      disabled={formData.instructions.length === 1}
                    >
                      <Trash2 className="h-5 w-5" />
                    </button>
                  </div>
                ))}
                <button
                  type="button"
                  onClick={() => addItem("instructions")}
                  className="w-full py-2 bg-gray-100 text-gray-600 rounded-lg hover:bg-gray-200 transition-colors flex items-center justify-center gap-2"
                >
                  <Plus className="h-5 w-5" />
                  <span>Add Instruction</span>
                </button>
              </div>
            </div>

            {error && (
              <div className="text-red-500 text-center mt-4">{error}</div>
            )}

            <div className="flex justify-end gap-4 pt-4 border-t">
              <button
                type="button"
                onClick={() => navigate("/")}
                className="px-6 py-2 bg-gray-100 text-gray-700 rounded-lg hover:bg-gray-200 transition-colors"
              >
                Cancel
              </button>
              <button
                type="submit"
                disabled={loading}
                className="px-6 py-2 bg-orange-500 text-white rounded-lg hover:bg-orange-600 transition-colors disabled:bg-orange-300 flex items-center gap-2"
              >
                {loading ? (
                  "Publishing..."
                ) : (
                  <>
                    <ChefHat className="h-5 w-5" />
                    <span>Publish Recipe</span>
                  </>
                )}
              </button>
            </div>
          </form>
        </div>
      </div>
    </div>
  );
};

export default RecipeForm;


========================================
File: pages\SignUp.jsx
========================================

// import React, { useState } from 'react';
// import { User, Mail, Lock, Eye, EyeOff, Image } from 'lucide-react';
// import { useNavigate } from 'react-router-dom';

// const Signup = () => {
//     const [fullName, setFullName] = useState('');
//     const [email, setEmail] = useState('');
//     const [username, setUsername] = useState('');
//     const [password, setPassword] = useState('');
//     const [avatar, setAvatar] = useState(null);
//     const [coverImage, setCoverImage] = useState(null);
//     const [showPassword, setShowPassword] = useState(false);
//     const [error, setError] = useState('');  // Add error state
//     const navigate = useNavigate();

//     const handleSubmit = async (e) => {
//         e.preventDefault();
//         setError('');

//         if (!fullName || !email || !username || !password) {
//             setError('Please fill in all required fields.');
//             return;
//         }

//         // Simulate signup (replace with your actual API call)
//         const formData = new FormData();
//         formData.append('fullName', fullName);
//         formData.append('email', email);
//         formData.append('username', username);
//         formData.append('password', password);
//         if (avatar) formData.append('avatar', avatar);
//         if (coverImage) formData.append('coverImage', coverImage);

//         try {
//             const response = await fetch('/api/register', {  // Replace '/api/register'
//                 method: 'POST',
//                 body: formData,
//             });

//             if (response.ok) {
//                 console.log('User registered successfully');
//                 navigate('/login');
//             } else {
//                 const data = await response.json();
//                 setError(data.message || 'Registration failed. Please try again.');
//             }

//         } catch (error) {
//             console.error('Error registering user:', error);
//             setError('An unexpected error occurred. Please try again.');
//         }
//     };

//     const togglePasswordVisibility = () => {
//         setShowPassword(!showPassword);
//     };

//     const handleAvatarChange = (e) => {
//         if (e.target.files && e.target.files[0]) {
//             setAvatar(e.target.files[0]);
//         }
//     };

//     const handleCoverImageChange = (e) => {
//         if (e.target.files && e.target.files[0]) {
//             setCoverImage(e.target.files[0]);
//         }
//     };

//     return (
//         <div className="min-h-screen flex items-center justify-center bg-gradient-to-r from-orange-[250] to-yellow-300 p-4">
//             <div className="w-full max-w-md bg-white rounded-3xl shadow-xl p-8 md:px-10 md:py-7">
//                 <h1 className="text-3xl font-bold text-gray-800 mb-2 text-center">Create Account</h1>
//                 <p className="text-gray-600 mb-4 text-center">Sign up to get started</p>

//                 <form onSubmit={handleSubmit} className="space-y-6">
//                     {/* Full Name */}
//                     <div>
//                         <label htmlFor="fullName" className="sr-only">Full Name</label>
//                         <div className="relative">
//                             <User className="absolute left-3 top-1/2 -translate-y-1/2 h-5 w-5 text-gray-400" />
//                             <input
//                                 type="text"
//                                 id="fullName"
//                                 placeholder="Full Name"
//                                 value={fullName}
//                                 onChange={(e) => setFullName(e.target.value)}
//                                 className="w-full pl-10 pr-4 py-3 rounded-xl border border-gray-200 focus:ring-2 focus:ring-orange-500 focus:border-orange-500 transition-all"
//                                 required
//                             />
//                         </div>
//                     </div>

//                     {/* Email */}
//                     <div>
//                         <label htmlFor="email" className="sr-only">Email</label>
//                         <div className="relative">
//                             <Mail className="absolute left-3 top-1/2 -translate-y-1/2 h-5 w-5 text-gray-400" />
//                             <input
//                                 type="email"
//                                 id="email"
//                                 placeholder="Email"
//                                 value={email}
//                                 onChange={(e) => setEmail(e.target.value)}
//                                 className="w-full pl-10 pr-4 py-3 rounded-xl border border-gray-200 focus:ring-2 focus:ring-orange-500 focus:border-orange-500 transition-all"
//                                 required
//                             />
//                         </div>
//                     </div>

//                     {/* Username */}
//                     <div>
//                         <label htmlFor="username" className="sr-only">Username</label>
//                         <div className="relative">
//                             <User className="absolute left-3 top-1/2 -translate-y-1/2 h-5 w-5 text-gray-400" />
//                             <input
//                                 type="text"
//                                 id="username"
//                                 placeholder="Username"
//                                 value={username}
//                                 onChange={(e) => setUsername(e.target.value)}
//                                 className="w-full pl-10 pr-4 py-3 rounded-xl border border-gray-200 focus:ring-2 focus:ring-orange-500 focus:border-orange-500 transition-all"
//                                 required
//                             />
//                         </div>
//                     </div>

//                     {/* Password */}
//                     <div>
//                         <label htmlFor="password" className="sr-only">Password</label>
//                         <div className="relative">
//                             <Lock className="absolute left-3 top-1/2 -translate-y-1/2 h-5 w-5 text-gray-400" />
//                             <input
//                                 type={showPassword ? 'text' : 'password'}
//                                 id="password"
//                                 placeholder="Password"
//                                 value={password}
//                                 onChange={(e) => setPassword(e.target.value)}
//                                 className="w-full pl-10 pr-10 py-3 rounded-xl border border-gray-200 focus:ring-2 focus:ring-orange-500 focus:border-orange-500 transition-all"
//                                 required
//                             />
//                             <button
//                                 type="button"
//                                 className="absolute right-3 top-1/2 -translate-y-1/2 p-2 text-gray-500 hover:text-gray-700 focus:outline-none"
//                                 onClick={togglePasswordVisibility}
//                             >
//                                 {showPassword ? <EyeOff className="h-5 w-5" /> : <Eye className="h-5 w-5" />}
//                             </button>
//                         </div>
//                     </div>

//                     {/* UserProfile Picture */}
//                     <div>
//                         <label htmlFor="avatar" className="block text-sm font-medium text-gray-700">Profile Picture</label>
//                         <div className="relative mt-1">
//                             <input
//                                 type="file"
//                                 id="avatar"
//                                 accept="image/*"
//                                 onChange={handleAvatarChange}
//                                 className="sr-only" // Hide the default file input
//                             />
//                             <label
//                                 htmlFor="avatar"
//                                 className="flex items-center justify-between w-full px-4 py-3 rounded-xl border border-gray-200 cursor-pointer hover:bg-gray-50 transition-colors"
//                             >
//                                 <div className="flex items-center">
//                                     <Image className="h-5 w-5 text-gray-400 mr-2" />
//                                     <span>{avatar ? avatar.name : "Choose File"}</span>
//                                 </div>
//                                 <span className="text-gray-500">{avatar ? "" : "No file chosen"}</span>
//                             </label>
//                         </div>
//                     </div>

//                     {/* Cover Image */}
//                     <div>
//                         <label htmlFor="coverImage" className="block text-sm font-medium text-gray-700">Cover Image (Optional)</label>
//                         <div className="relative mt-1">
//                             <input
//                                 type="file"
//                                 id="coverImage"
//                                 accept="image/*"
//                                 onChange={handleCoverImageChange}
//                                 className="sr-only"  // Hide the default file input
//                             />
//                             <label
//                                 htmlFor="coverImage"
//                                 className="flex items-center justify-between w-full px-4 py-3 rounded-xl border border-gray-200 cursor-pointer hover:bg-gray-50 transition-colors"
//                             >
//                                 <div className="flex items-center">
//                                     <Image className="h-5 w-5 text-gray-400 mr-2" />
//                                     <span>{coverImage ? coverImage.name : "Choose File"}</span>
//                                 </div>
//                                 <span className="text-gray-500">{coverImage ? "" : "No file chosen"}</span>
//                             </label>
//                         </div>
//                     </div>

//                     {error && (
//                         <div className="bg-red-100 border-l-4 border-red-500 text-red-700 p-2 rounded-md" role="alert">
//                             <p>{error}</p>
//                         </div>
//                     )}

//                     <button
//                         type="submit"
//                         className="w-full py-3.5 bg-orange-500 text-white rounded-xl font-medium hover:bg-orange-600 transition-all"
//                     >
//                         Create Account
//                     </button>

//                     <p className="text-center text-sm text-gray-600 mt-4">
//                         Already have an account?{' '}
//                         <a href="#" className="text-orange-600 font-medium hover:underline" onClick={() => navigate("/login")}>Sign in</a>
//                     </p>
//                 </form>
//             </div>
//         </div>
//     );
// };

// export default Signup;

// import React, { useState, useEffect } from "react";
// import { User, Mail, Lock, Eye, EyeOff, Image } from "lucide-react";
// import { useNavigate } from "react-router-dom";
// import { useDispatch, useSelector } from "react-redux";
// import { registerUser, clearError } from "../features/auth/registerUser";

// const Signup = () => {
//   const [fullName, setFullName] = useState("");
//   const [email, setEmail] = useState("");
//   const [username, setUsername] = useState("");
//   const [password, setPassword] = useState("");
//   const [avatar, setAvatar] = useState(null);
//   const [coverImage, setCoverImage] = useState(null);
//   const [showPassword, setShowPassword] = useState(false);
//   const [error, setError] = useState("");

//   const navigate = useNavigate();
//   const dispatch = useDispatch();
//   const {
//     loading,
//     error: reduxError,
//     isAuthenticated,
//   } = useSelector((state) => state.auth);

//   useEffect(() => {
//     if (isAuthenticated) {
//       navigate("/login");
//     }
//     return () => {
//       dispatch(clearError());
//     };
//   }, [isAuthenticated, navigate, dispatch]);

//   const handleSubmit = async (e) => {
//     e.preventDefault();
//     setError("");

//     if (!fullName || !email || !username || !password) {
//       setError("Please fill in all required fields.");
//       return;
//     }

//     const formData = new FormData();
//     formData.append("fullName", fullName);
//     formData.append("email", email);
//     formData.append("username", username);
//     formData.append("password", password);
//     if (avatar) formData.append("avatar", avatar);
//     if (coverImage) formData.append("coverImage", coverImage);

//     dispatch(registerUser(formData));
//   };

//   const togglePasswordVisibility = () => {
//     setShowPassword(!showPassword);
//   };

//   const handleAvatarChange = (e) => {
//     if (e.target.files && e.target.files[0]) {
//       setAvatar(e.target.files[0]);
//     }
//   };

//   const handleCoverImageChange = (e) => {
//     if (e.target.files && e.target.files[0]) {
//       setCoverImage(e.target.files[0]);
//     }
//   };

//   return (
//     <div className="min-h-screen flex items-center justify-center bg-gradient-to-r from-orange-[250] to-yellow-300 p-4">
//       <div className="w-full max-w-md bg-white rounded-3xl shadow-xl p-8 md:px-10 md:py-7">
//         <h1 className="text-3xl font-bold text-gray-800 mb-2 text-center">
//           Create Account
//         </h1>
//         <p className="text-gray-600 mb-4 text-center">Sign up to get started</p>

//         <form onSubmit={handleSubmit} className="space-y-6">
//           {/* Full Name */}
//           <div>
//             <label htmlFor="fullName" className="sr-only">
//               Full Name
//             </label>
//             <div className="relative">
//               <User className="absolute left-3 top-1/2 -translate-y-1/2 h-5 w-5 text-gray-400" />
//               <input
//                 type="text"
//                 id="fullName"
//                 placeholder="Full Name"
//                 value={fullName}
//                 onChange={(e) => setFullName(e.target.value)}
//                 className="w-full pl-10 pr-4 py-3 rounded-xl border border-gray-200 focus:ring-2 focus:ring-orange-500 focus:border-orange-500 transition-all"
//                 required
//               />
//             </div>
//           </div>

//           {/* Email */}
//           <div>
//             <label htmlFor="email" className="sr-only">
//               Email
//             </label>
//             <div className="relative">
//               <Mail className="absolute left-3 top-1/2 -translate-y-1/2 h-5 w-5 text-gray-400" />
//               <input
//                 type="email"
//                 id="email"
//                 placeholder="Email"
//                 value={email}
//                 onChange={(e) => setEmail(e.target.value)}
//                 className="w-full pl-10 pr-4 py-3 rounded-xl border border-gray-200 focus:ring-2 focus:ring-orange-500 focus:border-orange-500 transition-all"
//                 required
//               />
//             </div>
//           </div>

//           {/* Username */}
//           <div>
//             <label htmlFor="username" className="sr-only">
//               Username
//             </label>
//             <div className="relative">
//               <User className="absolute left-3 top-1/2 -translate-y-1/2 h-5 w-5 text-gray-400" />
//               <input
//                 type="text"
//                 id="username"
//                 placeholder="Username"
//                 value={username}
//                 onChange={(e) => setUsername(e.target.value)}
//                 className="w-full pl-10 pr-4 py-3 rounded-xl border border-gray-200 focus:ring-2 focus:ring-orange-500 focus:border-orange-500 transition-all"
//                 required
//               />
//             </div>
//           </div>

//           {/* Password */}
//           <div>
//             <label htmlFor="password" className="sr-only">
//               Password
//             </label>
//             <div className="relative">
//               <Lock className="absolute left-3 top-1/2 -translate-y-1/2 h-5 w-5 text-gray-400" />
//               <input
//                 type={showPassword ? "text" : "password"}
//                 id="password"
//                 placeholder="Password"
//                 value={password}
//                 onChange={(e) => setPassword(e.target.value)}
//                 className="w-full pl-10 pr-10 py-3 rounded-xl border border-gray-200 focus:ring-2 focus:ring-orange-500 focus:border-orange-500 transition-all"
//                 required
//               />
//               <button
//                 type="button"
//                 className="absolute right-3 top-1/2 -translate-y-1/2 p-2 text-gray-500 hover:text-gray-700 focus:outline-none"
//                 onClick={togglePasswordVisibility}
//               >
//                 {showPassword ? (
//                   <EyeOff className="h-5 w-5" />
//                 ) : (
//                   <Eye className="h-5 w-5" />
//                 )}
//               </button>
//             </div>
//           </div>

//           {/* UserProfile Picture */}
//           <div>
//             <label
//               htmlFor="avatar"
//               className="block text-sm font-medium text-gray-700"
//             >
//               Profile Picture
//             </label>
//             <div className="relative mt-1">
//               <input
//                 type="file"
//                 id="avatar"
//                 accept="image/*"
//                 onChange={handleAvatarChange}
//                 className="sr-only" // Hide the default file input
//               />
//               <label
//                 htmlFor="avatar"
//                 className="flex items-center justify-between w-full px-4 py-3 rounded-xl border border-gray-200 cursor-pointer hover:bg-gray-50 transition-colors"
//               >
//                 <div className="flex items-center">
//                   <Image className="h-5 w-5 text-gray-400 mr-2" />
//                   <span>{avatar ? avatar.name : "Choose File"}</span>
//                 </div>
//                 <span className="text-gray-500">
//                   {avatar ? "" : "No file chosen"}
//                 </span>
//               </label>
//             </div>
//           </div>

//           {/* Cover Image */}
//           <div>
//             <label
//               htmlFor="coverImage"
//               className="block text-sm font-medium text-gray-700"
//             >
//               Cover Image (Optional)
//             </label>
//             <div className="relative mt-1">
//               <input
//                 type="file"
//                 id="coverImage"
//                 accept="image/*"
//                 onChange={handleCoverImageChange}
//                 className="sr-only" // Hide the default file input
//               />
//               <label
//                 htmlFor="coverImage"
//                 className="flex items-center justify-between w-full px-4 py-3 rounded-xl border border-gray-200 cursor-pointer hover:bg-gray-50 transition-colors"
//               >
//                 <div className="flex items-center">
//                   <Image className="h-5 w-5 text-gray-400 mr-2" />
//                   <span>{coverImage ? coverImage.name : "Choose File"}</span>
//                 </div>
//                 <span className="text-gray-500">
//                   {coverImage ? "" : "No file chosen"}
//                 </span>
//               </label>
//             </div>
//           </div>

//           {(error || reduxError) && (
//             <div
//               className="bg-red-100 border-l-4 border-red-500 text-red-700 p-2 rounded-md"
//               role="alert"
//             >
//               <p>{error || reduxError}</p>
//             </div>
//           )}

//           <button
//             type="submit"
//             className="w-full py-3.5 bg-orange-500 text-white rounded-xl font-medium hover:bg-orange-600 transition-all disabled:bg-orange-300"
//             disabled={loading}
//           >
//             {loading ? "Creating Account..." : "Create Account"}
//           </button>

//           <p className="text-center text-sm text-gray-600 mt-4">
//             Already have an account?{" "}
//             <a
//               href="#"
//               className="text-orange-600 font-medium hover:underline"
//               onClick={() => navigate("/login")}
//             >
//               Sign in
//             </a>
//           </p>
//         </form>
//       </div>
//     </div>
//   );
// };

// export default Signup;

// File: pages/Signup.jsx
import React, { useState, useEffect } from "react";
import { User, Mail, Lock, Eye, EyeOff, Image } from "lucide-react";
import { useNavigate } from "react-router-dom";
import { useDispatch, useSelector } from "react-redux";
import { registerUser } from "../features/auth/authSlice"; // Use authSlice instead of registerUser.js

const Signup = () => {
  const [fullName, setFullName] = useState("");
  const [email, setEmail] = useState("");
  const [username, setUsername] = useState("");
  const [password, setPassword] = useState("");
  const [avatar, setAvatar] = useState(null);
  const [coverImage, setCoverImage] = useState(null);
  const [showPassword, setShowPassword] = useState(false);

  const navigate = useNavigate();
  const dispatch = useDispatch();
  const { loading, error, isAuthenticated } = useSelector(
    (state) => state.auth
  );

  useEffect(() => {
    if (isAuthenticated) {
      navigate("/"); // Redirect to home after successful registration
    }
  }, [isAuthenticated, navigate]);

  const handleSubmit = async (e) => {
    e.preventDefault();

    if (!fullName || !email || !username || !password || !avatar) {
      return;
    }

    const formData = new FormData();
    formData.append("fullName", fullName);
    formData.append("email", email);
    formData.append("username", username);
    formData.append("password", password);
    if (avatar) formData.append("avatar", avatar);
    if (coverImage) formData.append("coverImage", coverImage);

    dispatch(registerUser(formData));
  };

  const togglePasswordVisibility = () => {
    setShowPassword(!showPassword);
  };

  const handleAvatarChange = (e) => {
    if (e.target.files && e.target.files[0]) {
      setAvatar(e.target.files[0]);
    }
  };

  const handleCoverImageChange = (e) => {
    if (e.target.files && e.target.files[0]) {
      setCoverImage(e.target.files[0]);
    }
  };

  return (
    <div className="min-h-screen flex items-center justify-center bg-gradient-to-r from-orange-[250] to-yellow-300 p-4">
      <div className="w-full max-w-md bg-white rounded-3xl shadow-xl p-8 md:px-10 md:py-7">
        <h1 className="text-3xl font-bold text-gray-800 mb-2 text-center">
          Create Account
        </h1>
        <p className="text-gray-600 mb-4 text-center">Sign up to get started</p>

        <form onSubmit={handleSubmit} className="space-y-6">
          <div>
            <label htmlFor="fullName" className="sr-only">
              Full Name
            </label>
            <div className="relative">
              <User className="absolute left-3 top-1/2 -translate-y-1/2 h-5 w-5 text-gray-400" />
              <input
                type="text"
                id="fullName"
                placeholder="Full Name"
                value={fullName}
                onChange={(e) => setFullName(e.target.value)}
                className="w-full pl-10 pr-4 py-3 rounded-xl border border-gray-200 focus:ring-2 focus:ring-orange-500 focus:border-orange-500 transition-all"
                required
              />
            </div>
          </div>

          <div>
            <label htmlFor="email" className="sr-only">
              Email
            </label>
            <div className="relative">
              <Mail className="absolute left-3 top-1/2 -translate-y-1/2 h-5 w-5 text-gray-400" />
              <input
                type="email"
                id="email"
                placeholder="Email"
                value={email}
                onChange={(e) => setEmail(e.target.value)}
                className="w-full pl-10 pr-4 py-3 rounded-xl border border-gray-200 focus:ring-2 focus:ring-orange-500 focus:border-orange-500 transition-all"
                required
              />
            </div>
          </div>

          <div>
            <label htmlFor="username" className="sr-only">
              Username
            </label>
            <div className="relative">
              <User className="absolute left-3 top-1/2 -translate-y-1/2 h-5 w-5 text-gray-400" />
              <input
                type="text"
                id="username"
                placeholder="Username"
                value={username}
                onChange={(e) => setUsername(e.target.value)}
                className="w-full pl-10 pr-4 py-3 rounded-xl border border-gray-200 focus:ring-2 focus:ring-orange-500 focus:border-orange-500 transition-all"
                required
              />
            </div>
          </div>

          <div>
            <label htmlFor="password" className="sr-only">
              Password
            </label>
            <div className="relative">
              <Lock className="absolute left-3 top-1/2 -translate-y-1/2 h-5 w-5 text-gray-400" />
              <input
                type={showPassword ? "text" : "password"}
                id="password"
                placeholder="Password"
                value={password}
                onChange={(e) => setPassword(e.target.value)}
                className="w-full pl-10 pr-10 py-3 rounded-xl border border-gray-200 focus:ring-2 focus:ring-orange-500 focus:border-orange-500 transition-all"
                required
              />
              <button
                type="button"
                className="absolute right-3 top-1/2 -translate-y-1/2 p-2 text-gray-500 hover:text-gray-700 focus:outline-none"
                onClick={togglePasswordVisibility}
              >
                {showPassword ? (
                  <EyeOff className="h-5 w-5" />
                ) : (
                  <Eye className="h-5 w-5" />
                )}
              </button>
            </div>
          </div>

          <div>
            <label
              htmlFor="avatar"
              className="block text-sm font-medium text-gray-700"
            >
              Profile Picture
            </label>
            <div className="relative mt-1">
              <input
                type="file"
                id="avatar"
                accept="image/*"
                onChange={handleAvatarChange}
                className="sr-only"
              />
              <label
                htmlFor="avatar"
                className="flex items-center justify-between w-full px-4 py-3 rounded-xl border border-gray-200 cursor-pointer hover:bg-gray-50 transition-colors"
              >
                <div className="flex items-center">
                  <Image className="h-5 w-5 text-gray-400 mr-2" />
                  <span>{avatar ? avatar.name : "Choose File"}</span>
                </div>
                <span className="text-gray-500">
                  {avatar ? "" : "No file chosen"}
                </span>
              </label>
            </div>
          </div>

          <div>
            <label
              htmlFor="coverImage"
              className="block text-sm font-medium text-gray-700"
            >
              Cover Image (Optional)
            </label>
            <div className="relative mt-1">
              <input
                type="file"
                id="coverImage"
                accept="image/*"
                onChange={handleCoverImageChange}
                className="sr-only"
              />
              <label
                htmlFor="coverImage"
                className="flex items-center justify-between w-full px-4 py-3 rounded-xl border border-gray-200 cursor-pointer hover:bg-gray-50 transition-colors"
              >
                <div className="flex items-center">
                  <Image className="h-5 w-5 text-gray-400 mr-2" />
                  <span>{coverImage ? coverImage.name : "Choose File"}</span>
                </div>
                <span className="text-gray-500">
                  {coverImage ? "" : "No file chosen"}
                </span>
              </label>
            </div>
          </div>

          {error && (
            <div
              className="bg-red-100 border-l-4 border-red-500 text-red-700 p-2 rounded-md"
              role="alert"
            >
              <p>{error}</p>
            </div>
          )}

          <button
            type="submit"
            className="w-full py-3.5 bg-orange-500 text-white rounded-xl font-medium hover:bg-orange-600 transition-all disabled:bg-orange-300"
            disabled={loading}
          >
            {loading ? "Creating Account..." : "Create Account"}
          </button>

          <p className="text-center text-sm text-gray-600 mt-4">
            Already have an account?{" "}
            <a
              href="#"
              className="text-orange-600 font-medium hover:underline"
              onClick={() => navigate("/login")}
            >
              Sign in
            </a>
          </p>
        </form>
      </div>
    </div>
  );
};

export default Signup;


========================================
File: pages\UserProfile.jsx
========================================

import React, { useState, useEffect } from 'react';
import { useParams } from 'react-router-dom';
import { Trash2 } from 'lucide-react';
import VideoCard from '../components/VideoCard';
import RecipeCard from '../components/RecipeCard';

const Profile = () => {
  const { username } = useParams();
  const [activeTab, setActiveTab] = useState('videos');

  const [user, setUser] = useState({
    name: 'Mohhhhh',
    username: username || 'nvvv',
    avatar: 'https://via.placeholder.com/150?text=AS',
    joinDate: 'April 2024',
    followers: 1,
    following: 21,
    bio: 'Simple and crazy \n Wish me on 8th April ❤️',
  });

  const [userContent, setUserContent] = useState({
    videos: [
      {
        id: '1',
        title: 'Authentic Thai Green Curry Recipe',
        thumbnail: 'https://images.unsplash.com/photo-1455619452474-d2be8b1e70cd?auto=format&fit=crop&w=300&q=80',
        duration: '15:30',
        channel: 'CookPal',
        channelAvatar: 'https://via.placeholder.com/40',
        description: 'Learn to make authentic Thai curry from scratch',
        category: 'Cooking'
      },
      {
        id: '2',
        title: 'Homemade Pasta Carbonara',
        thumbnail: 'https://images.unsplash.com/photo-1600585154340-be6161a56a0c?auto=format&fit=crop&w=300&q=80',
        duration: '12:45',
        channel: 'CookPal',
        channelAvatar: 'https://via.placeholder.com/40',
        description: 'Classic Italian pasta dish tutorial',
        category: 'Cooking'
      },
    ],
    recipes: [
      {
        id: '1',
        title: 'Classic Chocolate Cake',
        thumbnail: 'https://images.unsplash.com/photo-1578985545062-69928b1d9587?auto=format&fit=crop&w=300&q=80',
        prepTime: 20,
        cookTime: 35,
        difficulty: 'Moderate',
        category: 'Dessert',
        description: 'A rich and moist chocolate cake perfect for any occasion.',
        author: 'Mohhhhh',
        authorAvatar: 'https://via.placeholder.com/40',
        tags: ['Chocolate', 'Baking', 'Dessert']
      },
      {
        id: '2',
        title: 'Quick Vegan Stir-Fry',
        thumbnail: 'https://images.unsplash.com/photo-1511690656952-34342bb7c2f2?auto=format&fit=crop&w=300&q=80',
        prepTime: 10,
        cookTime: 10,
        difficulty: 'Easy',
        category: 'Main Course',
        description: 'A fast and delicious vegan stir-fry ready in 20 minutes.',
        author: 'Mohhhhh',
        authorAvatar: 'https://via.placeholder.com/40',
        tags: ['Vegan', 'Quick', 'Healthy']
      },
    ],
  });

  const [showConfirm, setShowConfirm] = useState(null);

  useEffect(() => {
    // Simulated API call
    // fetchUserData();
  }, [username]);

  const handleDelete = (type, id) => {
    setShowConfirm({ type, id });
  };

  const confirmDelete = (type, id) => {
    setUserContent(prev => ({
      ...prev,
      [type]: prev[type].filter(item => item.id !== id)
    }));
    setShowConfirm(null);
  };

  const cancelDelete = () => setShowConfirm(null);

  return (
      <div className="min-h-screen bg-gray-50 py-6">
        <div className="container mx-auto px-4">
          {/* Profile Header */}
          <div className="bg-orange-500 rounded-xl p-4 text-white mb-6 shadow-lg">
            <div className="flex flex-col md:flex-row md:items-center md:justify-between gap-4">
              <div className="flex items-center gap-4">
                <img
                    src={user.avatar}
                    alt={user.name}
                    className="w-20 h-20 rounded-full object-cover border-2 border-white"
                />
                <div>
                  <h1 className="text-2xl font-bold">{user.name}</h1>
                  <p className="text-orange-100">@{user.username}</p>
                  <p className="text-sm text-orange-200">Joined {user.joinDate}</p>
                </div>
              </div>
              <div className="flex items-center gap-4">
                <button className="bg-white text-orange-600 px-4 py-2 rounded-full hover:bg-orange-50 transition-colors">
                  Edit Profile
                </button>
                <span className="text-orange-100">
                {user.followers} Foodies | {user.following} World
              </span>
              </div>
            </div>
            <p className="mt-4 whitespace-pre-line text-orange-100">{user.bio}</p>
          </div>

          {/* Tab Navigation */}
          <div className="mb-8">
            <div className="flex justify-center gap-4 border-b border-gray-200 pb-4">
              <button
                  onClick={() => setActiveTab('videos')}
                  className={`px-6 py-2 rounded-full text-sm font-medium transition-colors ${
                      activeTab === 'videos'
                          ? 'bg-orange-100 text-orange-500'
                          : 'text-gray-500 hover:text-gray-700'
                  }`}
              >
                Videos ({userContent.videos.length})
              </button>
              <button
                  onClick={() => setActiveTab('recipes')}
                  className={`px-6 py-2 rounded-full text-sm font-medium transition-colors ${
                      activeTab === 'recipes'
                          ? 'bg-orange-100 text-orange-500'
                          : 'text-gray-500 hover:text-gray-700'
                  }`}
              >
                Recipes ({userContent.recipes.length})
              </button>
            </div>
          </div>

          {/* Content Grid */}
          <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6">
            {activeTab === 'videos' ? (
                userContent.videos.length > 0 ? (
                    userContent.videos.map(video => (
                        <div key={video.id} className="relative">
                          <VideoCard video={video} />
                          <button
                              onClick={() => handleDelete('videos', video.id)}
                              className="absolute top-2 right-2 p-2 bg-white/90 rounded-full hover:bg-white transition-colors z-10"
                          >
                            <Trash2 className="h-5 w-5 text-red-500" />
                          </button>
                        </div>
                    ))
                ) : (
                    <div className="col-span-full text-center py-12 text-gray-500">
                      <p className="text-lg">No videos uploaded yet</p>
                    </div>
                )
            ) : (
                userContent.recipes.length > 0 ? (
                    userContent.recipes.map(recipe => (
                        <div key={recipe.id} className="relative">
                          <RecipeCard recipe={recipe} />
                          <button
                              onClick={() => handleDelete('recipes', recipe.id)}
                              className="absolute top-2 right-2 p-2 bg-white/90 rounded-full hover:bg-white transition-colors z-10"
                          >
                            <Trash2 className="h-5 w-5 text-red-500" />
                          </button>
                        </div>
                    ))
                ) : (
                    <div className="col-span-full text-center py-12 text-gray-500">
                      <p className="text-lg">No recipes shared yet</p>
                    </div>
                )
            )}
          </div>

          {/* Delete Confirmation Modal */}
          {showConfirm && (
              <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
                <div className="bg-white p-6 rounded-xl shadow-lg w-80">
                  <h3 className="text-lg font-semibold mb-4">Confirm Delete</h3>
                  <p className="text-gray-600 mb-6">
                    Are you sure you want to delete this {showConfirm.type.slice(0, -1)}?
                  </p>
                  <div className="flex justify-end gap-3">
                    <button
                        onClick={cancelDelete}
                        className="px-4 py-2 text-gray-600 hover:bg-gray-100 rounded-lg"
                    >
                      Cancel
                    </button>
                    <button
                        onClick={() => confirmDelete(showConfirm.type, showConfirm.id)}
                        className="px-4 py-2 bg-red-500 text-white hover:bg-red-600 rounded-lg"
                    >
                      Delete
                    </button>
                  </div>
                </div>
              </div>
          )}
        </div>
      </div>
  );
};

export default Profile;

========================================
File: pages\VideoPage.jsx
========================================

import VideoCard from '../components/videoCard.jsx'
import videos from "../data/videos.js";

const VideoPage = () => {
    return (
        <div className="container mx-auto px-4 py-6">
            <header className="mb-6">
                <h1 className="text-3xl font-bold">Trending Videos</h1>
            </header>
            <div className="grid grid-cols-1 sm:grid-cols-2  xl:grid-cols-4 gap-6">
                {videos.map((video) => (
                    <VideoCard key={video.id} video={video} />
                ))}
            </div>
        </div>
    );
};

export default VideoPage;


========================================
File: pages\VideoPlayerPage.jsx
========================================

import React, { useState } from 'react';
import { useLocation } from 'react-router-dom';
import { Heart, Share2, Bookmark, MessageCircle, Send, ChevronDown, ChevronUp } from 'lucide-react';

const VideoPlayerPage = () => {
    const location = useLocation();
    const video = location.state?.video;

    const [comments, setComments] = useState([
        { id: 1, user: 'ChefLover23', avatar: 'https://via.placeholder.com/40?text=CL', text: 'This recipe is amazing! Tried it last night and it was a hit!', likes: 15, timestamp: '2 hours ago' },
        { id: 2, user: 'FoodieFan', avatar: 'https://via.placeholder.com/40?text=FF', text: 'Can you make a vegan version of this?', likes: 8, timestamp: '1 day ago' },
    ]);
    const [newComment, setNewComment] = useState('');
    const [showComments, setShowComments] = useState(false);

    if (!video) {
        return (
            <div className="min-h-screen bg-gray-50 flex items-center justify-center">
                <h2 className="text-2xl font-semibold text-gray-700">Video not found</h2>
            </div>
        );
    }

    const handleCommentSubmit = (e) => {
        e.preventDefault();
        if (newComment.trim()) {
            setComments([
                ...comments,
                { id: comments.length + 1, user: 'CurrentUser', avatar: 'https://via.placeholder.com/40?text=CU', text: newComment, likes: 0, timestamp: 'Just now' }
            ]);
            setNewComment('');
        }
    };

    // Mind-relaxing colors for Pinterest-style ingredient cards
    const pastelColors = [
        'bg-green-100', // Mint green
        'bg-purple-100', // Lavender
        'bg-orange-100', // Light peach
        'bg-blue-100', // Soft blue
        'bg-pink-100', // Pale pink
    ];

    return (
        <div className="min-h-screen bg-gray-50 py-6">
            <div className="container mx-auto px-4 flex flex-col lg:flex-row gap-6">
                {/* Left Section: Video Player, Info, Ingredients, Comments */}
                <div className="lg:w-2/3">
                    {/* Video Player */}
                    <div className="relative aspect-video rounded-xl overflow-hidden shadow-lg">
                        <video controls autoPlay className="w-full h-full object-cover" src={video.videoUrl} poster={video.thumbnail}>
                            Your browser does not support the video tag.
                        </video>
                    </div>

                    {/* Video Info Card */}
                    <div className="mt-4 bg-white p-4 rounded-xl shadow-sm">
                        <h1 className="text-2xl font-bold text-gray-900">{video.title}</h1>
                        <div className="flex items-center justify-between mt-2">
                            <div className="flex items-center space-x-3">
                                <img
                                    src={video.authorAvatar || 'https://via.placeholder.com/40?text=CH'}
                                    alt={video.author || 'Unknown Author'}
                                    className="w-10 h-10 rounded-full object-cover"
                                />
                                <div>
                                    <h3 className="text-lg font-semibold text-gray-800">{video.author || 'Unknown Author'}</h3>
                                    <p className="text-sm text-gray-500">@{video.username || 'unknown'}</p>
                                </div>
                            </div>
                            <div className="flex items-center space-x-4">
                                <button className="flex items-center text-gray-500 hover text-rose-500">
                                    <Heart className="h-6 w-6 mr-1" />
                                    <span>{video.likes || 0}</span>
                                </button>
                                <button className="p-2 hover bg-gray-200 rounded-full">
                                    <Share2 className="h-6 w-6 text-gray-600 hover text-gray-800" />
                                </button>
                                <button className="p-2 hover bg-gray-200 rounded-full">
                                    <Bookmark className="h-6 w-6 text-gray-600 hover text-yellow-500" />
                                </button>
                            </div>
                        </div>
                        <p className="text-gray-600 mt-2">{video.description}</p>
                    </div>

                    {/* Recipe Details Card */}
                    <div className="mt-4 bg-white p-4 rounded-xl shadow-sm">
                        <h2 className="text-xl font-semibold text-gray-800 mb-4">Recipe Details</h2>
                        <div className="grid grid-cols-1 sm:grid-cols-3 gap-4 mb-4">
                            <div>
                                <p className="text-sm text-gray-500">Prep Time</p>
                                <p className="text-lg font-medium text-gray-900">{video.prepTime} mins</p>
                            </div>
                            <div>
                                <p className="text-sm text-gray-500">Cook Time</p>
                                <p className="text-lg font-medium text-gray-900">{video.cookTime} mins</p>
                            </div>
                            <div>
                                <p className="text-sm text-gray-500">Difficulty</p>
                                <p className="text-lg font-medium text-gray-900">{video.difficulty}</p>
                            </div>
                        </div>
                        <div>
                            <p className="text-sm text-gray-500">Category</p>
                            <p className="text-lg font-medium text-gray-900">{video.category}</p>
                        </div>
                    </div>

                    {/* Ingredients Card - Pinterest Style with Text Only */}
                    <div className="mt-4 bg-white p-4 rounded-xl shadow-sm">
                        <h2 className="text-xl font-semibold text-gray-800 mb-4">Ingredients</h2>
                        <div className="grid grid-cols-2 sm:grid-cols-3 gap-4">
                            {video.ingredients.map((ingredient, index) => (
                                <div
                                    key={index}
                                    className={`${pastelColors[index % pastelColors.length]} p-4 rounded-lg shadow-sm hover shadow-md transition-shadow flex items-center justify-center`}
                                >
                                    <p className="text-gray-800 text-sm font-medium text-center">{ingredient}</p>
                                </div>
                            ))}
                        </div>
                    </div>

                    {/* Comment Section - Toggles Below */}
                    <div className="mt-4 bg-white p-4 rounded-xl shadow-sm">
                        <button
                            onClick={() => setShowComments(!showComments)}
                            className="flex items-center justify-between w-full text-xl font-semibold text-gray-800 mb-4"
                        >
                            <div className="flex items-center">
                                <MessageCircle className="h-5 w-5 mr-2 text-blue-500" />
                                Comments ({video.comments || comments.length})
                            </div>
                            {showComments ? <ChevronUp className="h-5 w-5" /> : <ChevronDown className="h-5 w-5" />}
                        </button>
                        {showComments && (
                            <div>
                                <form onSubmit={handleCommentSubmit} className="mb-6">
                                    <div className="flex items-center space-x-3">
                                        <img
                                            src="https://via.placeholder.com/40?text=CU"
                                            alt="User"
                                            className="w-10 h-10 rounded-full object-cover"
                                        />
                                        <div className="flex-1 relative">
                                            <input
                                                type="text"
                                                value={newComment}
                                                onChange={(e) => setNewComment(e.target.value)}
                                                placeholder="Add a comment..."
                                                className="w-full p-3 pr-12 rounded-md bg-gray-100 border border-gray-200 focus outline-none focus ring-2 focus ring-blue-500 focus border-transparent text-gray-700"
                                            />
                                            <button
                                                type="submit"
                                                className="absolute right-2 top-1/2 transform -translate-y-1/2 p-1 text-blue-500 hover text-blue-700"
                                            >
                                                <Send className="h-5 w-5" />
                                            </button>
                                        </div>
                                    </div>
                                </form>
                                <div className="space-y-4 max-h-[40vh] overflow-y-auto scrollbar-thin scrollbar-thumb-gray-300 scrollbar-track-gray-100">
                                    {comments.map((comment) => (
                                        <div key={comment.id} className="flex space-x-3">
                                            <img
                                                src={comment.avatar}
                                                alt={comment.user}
                                                className="w-10 h-10 rounded-full object-cover flex-shrink-0"
                                            />
                                            <div className="flex-1 bg-white p-4 rounded-md shadow-sm">
                                                <div className="flex items-center space-x-2">
                                                    <h4 className="text-sm font-semibold text-gray-800">{comment.user}</h4>
                                                    <span className="text-xs text-gray-500">{comment.timestamp}</span>
                                                </div>
                                                <p className="text-sm text-gray-700 mt-1">{comment.text}</p>
                                                <div className="flex items-center space-x-4 mt-2">
                                                    <button className="flex items-center text-gray-500 hover text-rose-500">
                                                        <Heart className="h-4 w-4 mr-1" />
                                                        <span className="text-xs">{comment.likes}</span>
                                                    </button>
                                                    <button className="text-xs text-gray-500 hover text-blue-500">Reply</button>
                                                </div>
                                            </div>
                                        </div>
                                    ))}
                                </div>
                            </div>
                        )}
                    </div>
                </div>

                {/* Right Section: Steps */}
                <div className="lg:w-1/3">
                    <div className="bg-white p-4 rounded-xl shadow-sm sticky top-6">
                        <h2 className="text-xl font-semibold text-gray-800 mb-4">Steps</h2>
                        <ol className="list-decimal list-inside space-y-2 max-h-[80vh] overflow-y-auto scrollbar-thin scrollbar-thumb-gray-300 scrollbar-track-gray-100">
                            {video.steps.map((step, index) => (
                                <li key={index} className="text-gray-700">{step}</li>
                            ))}
                        </ol>
                    </div>
                </div>
            </div>
        </div>
    );
};

export default VideoPlayerPage;

========================================
File: utils\api.js
========================================

export const apiRequest = async (
  endpoint,
  method = "GET",
  body = null,
  dispatch = null
) => {
  const token = localStorage.getItem("accessToken");
  const baseUrl =
    import.meta.env.VITE_API_URL || "http:

  const headers = {
    "Content-Type": "application/json",
  };

  if (token) {
    headers["Authorization"] = `Bearer ${token}`;
  }

  const requestOptions = {
    method,
    headers,
    credentials: "include",
  };

  if (body) {
    requestOptions.body =
      body instanceof FormData ? body : JSON.stringify(body);
    if (!(body instanceof FormData)) {
      headers["Content-Type"] = "application/json";
    } else {
      delete headers["Content-Type"];
    }
  }

  try {
    const response = await fetch(`${baseUrl}${endpoint}`, requestOptions);
    const data = await response.json();

    if (!response.ok) {
      if (response.status === 401 && dispatch) {
        const refreshed = await refreshToken(dispatch);
        if (refreshed) {
          return apiRequest(endpoint, method, body, dispatch);
        }
        throw new Error("Unauthorized - Unable to refresh token");
      }
      throw new Error(data.message || "API request failed");
    }

    return data;
  } catch (error) {
    console.error("API request error:", error);
    throw error;
  }
};

const refreshToken = async (dispatch) => {
  try {
    const response = await fetch(
      `${
        import.meta.env.VITE_API_URL || "http:
      }/users/refresh-token`,
      {
        method: "POST",
        credentials: "include",
      }
    );

    const data = await response.json();

    if (!response.ok) {
      localStorage.removeItem("accessToken");
      if (dispatch) {
        dispatch({ type: "auth/logoutUser" });
      }
      return false;
    }

    localStorage.setItem("accessToken", data.data.accessToken);
    return true;
  } catch (error) {
    console.error("Refresh token error:", error);
    localStorage.removeItem("accessToken");
    if (dispatch) {
      dispatch({ type: "auth/logoutUser" });
    }
    return false;
  }
};


